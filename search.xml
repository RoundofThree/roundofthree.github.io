<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C buffer overflow to inject shellcode</title>
      <link href="/2020/05/14/c-buffer-overflow-to-inject-shellcode/"/>
      <url>/2020/05/14/c-buffer-overflow-to-inject-shellcode/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C buffer overflow to hijack RP</title>
      <link href="/2020/05/14/c-buffer-overflow-to-hijack-rp/"/>
      <url>/2020/05/14/c-buffer-overflow-to-hijack-rp/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python threads 1</title>
      <link href="/2020/05/14/python-threads-1/"/>
      <url>/2020/05/14/python-threads-1/</url>
      
        <content type="html"><![CDATA[<p>When a server socket accepts a connection, it creates a client socket to handle the communication with the other party. However, if the server code is not multithreaded, others cannot connect to the server when it is handling the previous request. For example:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> socketserver <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># bind to socket.gethostname() so that it is reachable from the outside world, not 'localhost'</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># listen to 5 connections</span>server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># create a clientsocket that communicates with the other clientsocket</span>  <span class="token punctuation">(</span>client<span class="token punctuation">,</span> address<span class="token punctuation">)</span> <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># do whatever with the created clientsocket, in this case, run the thread from client_thread</span>  client<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'You are connected!'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>By default, the socket is <strong>blocking</strong>, so the calls to <code>recv()</code> and <code>send()</code> are blocked until <code>recv()</code> finds data or <code>send()</code> disposes of data. We can set the socket to <strong>non-blocking mode</strong>, but that will raise an error in such cases. Here is where multithreading comes into play and increases efficiency. Two ways to do it: create a class that inherits from <code>threading.Thread</code>, or use <code>thread.start_new_thread()</code> for simple server code.</p><p>For example, for <code>thread.start_new_thread()</code> define a function for the server behaviour, and pass the parameters in a tuple:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> thread<span class="token keyword">import</span> socket<span class="token comment" spellcheck="true"># code that handles a client connection</span><span class="token keyword">def</span> <span class="token function">handler</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">:</span>  client<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"You are connected!"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Client from '</span> <span class="token operator">+</span> repr<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'> '</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>    <span class="token keyword">if</span> data<span class="token operator">==</span><span class="token string">'bye'</span><span class="token punctuation">:</span>      client<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'Bye!'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      client<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'You said: '</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># initialize server socket</span>server <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># restrict to 100 connections</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token punctuation">(</span>client<span class="token punctuation">,</span> address<span class="token punctuation">)</span> <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># start a thread that calls the handler function</span>  thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span>handler<span class="token punctuation">,</span> <span class="token punctuation">(</span>client<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Or create a class that inherits from <code>Thread</code>:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token punctuation">,</span> threading<span class="token keyword">class</span> <span class="token class-name">ClientThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>clientAddress<span class="token punctuation">,</span>clientsocket<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>csocket <span class="token operator">=</span> clientsocket        self<span class="token punctuation">.</span>clientAddress <span class="token operator">=</span> clientAddress        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Client from: "</span><span class="token punctuation">,</span> clientAddress<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># called when thread starts</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        msg <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> self<span class="token punctuation">.</span>csocket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'> '</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>            <span class="token keyword">if</span> msg<span class="token operator">==</span><span class="token string">'bye'</span><span class="token punctuation">:</span>              self<span class="token punctuation">.</span>csocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'Bye!'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>              self<span class="token punctuation">.</span>csocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>bytes<span class="token punctuation">(</span><span class="token string">"You said:"</span> <span class="token operator">+</span> data<span class="token punctuation">,</span> <span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Client at "</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>clientAddress <span class="token punctuation">,</span> <span class="token string">" disconnected..."</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>csocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>LOCALHOST <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span>PORT <span class="token operator">=</span> <span class="token number">8080</span>server <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>LOCALHOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Server started"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Waiting for client request..."</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    clientsock<span class="token punctuation">,</span> clientAddress <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># create a thread with a customized Thread class</span>    newthread <span class="token operator">=</span> ClientThread<span class="token punctuation">(</span>clientAddress<span class="token punctuation">,</span> clientsock<span class="token punctuation">)</span>    newthread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> concurrency </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quick look into RAM with gdb: Stack &amp; Heap</title>
      <link href="/2020/05/14/quick-look-into-ram-with-gdb-stack-heap/"/>
      <url>/2020/05/14/quick-look-into-ram-with-gdb-stack-heap/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Hacking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> memory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 141: Linked List Cycle using slow-fast pointers</title>
      <link href="/2020/05/14/leetcode-141-linked-list-cycle-using-slow-fast-pointers/"/>
      <url>/2020/05/14/leetcode-141-linked-list-cycle-using-slow-fast-pointers/</url>
      
        <content type="html"><![CDATA[<h2 id="Leetcode-141-Linked-List-Cycle-Easy"><a href="#Leetcode-141-Linked-List-Cycle-Easy" class="headerlink" title="Leetcode 141: Linked List Cycle Easy."></a>Leetcode 141: <a href="https://leetcode.com/problems/linked-list-cycle/" target="_blank" rel="noopener">Linked List Cycle</a> Easy.</h2><blockquote><p>Given a linked list, determine if it has a cycle in it.</p></blockquote><blockquote><p>To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.</p></blockquote><p>Let’s solve it step by step. If there are no cycles, then it will reach <code>null</code> at some point during traversal, then return <code>false</code>.</p><p>If there is a cycle, <code>null</code> will never be reached, so we need another condition to end. Because a cycle is closed, a pointer will eventually point to the same node again over time, so this is a good place to use <strong>slow-fast pointers</strong> strategy. The <code>fast</code> pointer moves 2 steps each iteration, while <code>slow</code> advances 1 step. If they reencounter (pointing to the same object), then it is only possible if there is a cycle. Else if any of them reaches <code>null</code>, return <code>false</code>.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// fast slow pointers</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        ListNode fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        ListNode slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>slow <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> fast <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// they must reencounter at some point because slow moves 1 at a time, and 1 is a divisor</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// move 1 step</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// move 2 steps</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// whenever null is reached by any pointer means there is an end</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Time-and-space-complexity"><a href="#Time-and-space-complexity" class="headerlink" title="Time and space complexity"></a>Time and space complexity</h4><p><strong>Time: O(n)</strong></p><p>If the whole linked list is a cycle, then at least the slow pointer has to move <code>n/2</code> steps before the fast pointer starts again.</p><p><strong>Space: O(1)</strong></p><p>This method only uses two pointers.</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithms </tag>
            
            <tag> slow-fast pointers </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP and UDP: Transport Layer Protocols</title>
      <link href="/2020/05/12/tcp-and-udp/"/>
      <url>/2020/05/12/tcp-and-udp/</url>
      
        <content type="html"><![CDATA[<p>TCP and UDP are <strong>transport layer</strong> protocols (OSI layer 4). They are responsible for sending data from a source computer to a destination computer. They break the application data into <strong>packets</strong>, and each packet contains a piece of data and headers, which provide information from lower levels, for instance, IP (OSI layer 3: network layer). The way packets are handled and monitored is the main difference between TCP and UDP. As well, there is one set of port numbers for each of them: 0-1023 for UDP and other 0-1023 for TCP.</p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>A web server (computer A) sends an HTML file to a client (computer B), it uses the HTTP protocol and the HTTP layer asks the TCP layer to create a session between computer A and B. In the TCP layer, the data is divided into numbered packets, then they are forwarded individually to the IP layer.</p><h2 id="Difference-between-TCP-and-UDP"><a href="#Difference-between-TCP-and-UDP" class="headerlink" title="Difference between TCP and UDP"></a>Difference between TCP and UDP</h2><p>TCP sets up a session between A and B before communicating the data. This is because TCP ensures that no packets are lost or corrupted. By having a session, the recipient can check the correctness of the data with the sender, and it waits for receiving all the packets. Therefore, TCP is also part of the <strong>session layer</strong> (OSI layer 5). On the other hand, UDP is used for lossy transmissions, because there are no checks for data integrity, there may be some missing packets.</p><p>TCP is more reliable, but UDP is faster. Thus, TCP is used in tasks that require data integrity, like sending HTML files or form data, whereas UDP is used commonly in video sharing, where a few missing frames do not make a great difference.</p><h2 id="TCP-in-detail"><a href="#TCP-in-detail" class="headerlink" title="TCP in detail"></a>TCP in detail</h2><h3 id="TCP-handshake"><a href="#TCP-handshake" class="headerlink" title="TCP handshake"></a>TCP handshake</h3><p>It begins the conversation and consists of three steps:</p><pre><code>A -&gt; B        [SYN] seq=(a random num x), len=0B -&gt; A        [SYN, ACK] seq=(a random num y), ack=x+1, len=0A -&gt; B        [ACK] seq=x+1, ack=y+1, len=0</code></pre><p>Here only TCP headers are shown. <code>[SYN]</code> means that this flag is set, meaning the sender wants to begin a conversation. <code>[ACK]</code> means “acknowledge”, so it acknowledges that a previous packets was received. <code>seq</code> is the sequence number and <code>ack</code> is the acknowledge number. <code>len</code> is the length of the data in that packet, because in the handshaking process no data is actually sent, <code>len = 0</code>. The <code>seq</code> and <code>ack</code> are the key to check for possible lost packets.</p><p>We can see that <code>seq</code> is generated randomly when starting a conversation. Later, <code>seq</code> and <code>ack</code> are closely related. <code>seq</code> identifies the current flow for the sender itself, and <code>ack</code> is to tell the counterpart (the previous sender), that it has received a packet of a length that can be inferred from the last sequence number of the counterpart. This is how it works: <code>ack</code> takes the <code>seq</code> of the previous received packet + the length received, to acknowledge it has received a certain length; <code>seq</code> takes the <code>ack</code> of the previously received packet, because it identifies the current flow. So for example, if A last sent a packet with <code>seq</code>, but it received back a packet with <code>ack&lt;=seq</code>, then something is wrong.</p><p>Note: During TCP handshake, the <code>ack</code> is <code>seq+1</code> although <code>len=0</code>.</p><h3 id="TCP-transmission"><a href="#TCP-transmission" class="headerlink" title="TCP transmission"></a>TCP transmission</h3><p>During transmission, the recipient acknowledges that it has received successfully via an <code>[ACK]</code> packet.</p><pre><code>A -&gt; B        [PSH, ACK] seq=43, ack=23, len=12  eg. &quot;Hello World\n&quot; --&gt; 12 bytesB -&gt; A        [ACK] seq=23, ack=43+12=55, len=0</code></pre><h3 id="TCP-teardown"><a href="#TCP-teardown" class="headerlink" title="TCP teardown"></a>TCP teardown</h3><p>The session can end gracefully via <code>[FIN]</code> packets.</p><pre><code>A -&gt; B        [FIN, ACK] seq=13, ack=1, len=0B -&gt; A        [ACK] seq=1, ack=14, len=0......... B also does the same ..................B -&gt; B        [FIN, ACK] seq=1, ack=14, len=0A -&gt; B        [ACK] seq=14, ack=2, len=0</code></pre><p>A asks to end via a <code>[FIN]</code> packet, then B acknowledges that it has received that. However, triggered by the <code>[FIN]</code> packet, B also sends a <code>[FIN]</code> packet to A (provided B has not sent any <code>[FIN]</code> packets in this session).</p><p>If the session cannot be ended gracefully, the <code>[RST]</code> packet can be issued to end immediately.</p><h2 id="Practical-Python-socket-module"><a href="#Practical-Python-socket-module" class="headerlink" title="Practical: Python socket module"></a>Practical: <code>Python</code> <code>socket</code> module</h2><p>This module can be used to set a client socket and send TCP/UDP packets to a computer identified by the tuple (IP, port). Or it can also bind a service to a port, receive and send data.</p><p>A typical client socket:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token comment" spellcheck="true"># AF_INET for IPv4, AF_INET6 for IPv6; SOCK_STREAM for TCP, SOCK_DGRAM for UDP</span>client <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># connect to a server: "www.serverdomain.com"</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># send and receive</span>client<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># decode bytes object</span><span class="token comment" spellcheck="true"># remember to close the connection</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A simple server socket:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> socketserver <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># bind to socket.gethostname() so that it is reachable from the outside world, not 'localhost'</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># listen to 5 connections</span>server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># create a clientsocket that communicates with the other clientsocket</span>  <span class="token punctuation">(</span>client<span class="token punctuation">,</span> address<span class="token punctuation">)</span> <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># do whatever with the created clientsocket, in this case, run the thread from client_thread</span>  ct <span class="token operator">=</span> client_thread<span class="token punctuation">(</span>client<span class="token punctuation">)</span>  ct<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Practical-Wiresharp-packet-capture"><a href="#Practical-Wiresharp-packet-capture" class="headerlink" title="Practical: Wiresharp packet capture"></a>Practical: Wiresharp packet capture</h2><p>Wireshark is widely used to analyse packets. It has powerful filters, and it is a useful tool for network forensics!</p><p>Check that <code>seq</code> and <code>ack</code> numbers follow the rules. Observe how a <code>[RST]</code> flow is like, and how <code>[PSH]</code> packets are followed by an acknowledge packet.</p><p><img src="/2020/05/12/tcp-and-udp/pcap_tcp_analysis.png" alt="TCP packets in Wireshark"></p>]]></content>
      
      
      <categories>
          
          <category> Hacking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> networking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to practice data structures &amp; algorithms, my way to leetcoding</title>
      <link href="/2020/05/03/leetcode-frameworks/"/>
      <url>/2020/05/03/leetcode-frameworks/</url>
      
        <content type="html"><![CDATA[<p>Heya! This is the first of a series of articles about programming problems, which corresponds to my flag <strong>[365 leetcoding]</strong>. First, I am going to share my plan to practice <strong>data structures &amp; algorithms</strong>. This is the main skill tested in interviews, and of course the <strong>base</strong> of everything: the essence of thinking as a computer scientist.</p><p>Before diving into solving the programming problem, I think it is more efficient to have a picture of the main strategies we can use, so that when we see the problem, we can identify the best suited algorithmic paradigm by recognizing <strong>common patterns</strong>. Each paradigm has a corresponding <strong>framework</strong>, which guides me into how to structure my code.</p><p>Below I have collected the main frameworks I use:</p><ul><li>Recursion</li><li>Two pointers</li><li>Backtracking</li><li>Branch and bound</li><li>Brute-force search</li><li>Divide and conquer</li><li>Dynamic programming</li><li>Greedy algorithm</li><li>Prune and search</li></ul><p>TO DO:</p><ul><li>Java code for frameworks</li></ul><h2 id="Frameworks"><a href="#Frameworks" class="headerlink" title="Frameworks"></a>Frameworks</h2><h3 id="Trees-and-recursion"><a href="#Trees-and-recursion" class="headerlink" title="Trees and recursion"></a>Trees and recursion</h3><p>How do you identify a recursion problem?</p><ul><li>The problem needs to use the solution of similar subproblems.</li><li>A traversal.</li></ul><p>We observe that problems about trees often use recursion, because we can treat each of the children of a node as a new tree subproblem, thus the code looks like:</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span>TreeNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>base <span class="token keyword">case</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// base case manipulation</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// possible update commands</span>   <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// possible update commands after solving for left child</span>   <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// possible update commands after solving for right</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>As an example, take a look at this Leetcode Hard tree problem:</p><h5 id="Leetcode-124-Binary-Tree-Maximum-Path-Sum"><a href="#Leetcode-124-Binary-Tree-Maximum-Path-Sum" class="headerlink" title="Leetcode 124. Binary Tree Maximum Path Sum"></a>Leetcode 124. <a href="https://leetcode.com/problems/binary-tree-maximum-path-sum/" target="_blank" rel="noopener">Binary Tree Maximum Path Sum</a></h5><blockquote><p>Given a non-empty binary tree, find the maximum path sum.<br><br>For this problem, a path is defined as any sequence of nodes from some<br>starting node to any node in the tree along the parent-child connections.<br>The path must contain at least one node and does not need to go through the root.</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> ret <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxPathSum</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">oneSideMax</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">oneSideMax</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// base case</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// traverse left</span>  <span class="token keyword">int</span> left <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">oneSideMax</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// traverse right</span>  <span class="token keyword">int</span> right <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">oneSideMax</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// update the answer</span>  ret <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> left <span class="token operator">+</span> right <span class="token operator">+</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// return the max path considering the tree with root = root</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">+</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The framework is all about traversing all the nodes, and solving the problem for each node by updating a global variable <code>ret</code>. Note that we are using a <strong>global variable</strong> and an auxiliary function <code>oneSideMax()</code>. This is also a common pattern.</p><h3 id="Dynamic-programming"><a href="#Dynamic-programming" class="headerlink" title="Dynamic programming"></a>Dynamic programming</h3><p>Usually, DP problems ask for min or max conditions. To reach those conditions, we have to solve these problems:</p><ol><li><strong><em>Overlapping subproblem</em></strong>: think of a recursive trace that calls a function with same parameters several times, then this might suggest you to store computation results in a <strong>DP table</strong>.</li><li><strong><em>Optimal substructure</em></strong>: from the min or max state of some selected substructures, compute the <strong>optimal state</strong> for this structure. The subproblems should be independent.</li><li><strong><em>State transition equation</em></strong>: how do we measure <strong>state</strong>? This is often the key question in hard problems. The state of the problem functionally determines the result.</li></ol><p>Let’s analyse the coin change problem: How many ways are there to give change given a total amount and a set of coin values?</p><ul><li>Optimal substructure: say we decide to use a coin valued x, then the optimal structure is 1 + dp(amount-x). Since the amount of coins is unlimited, the subproblems are independent, so this is valid.</li><li>What is the state? Since the only change from the problem to the subproblem is the amount of money, the state is the amount of money (so it is passed as parameter).</li><li>Choose and choose the best, using <code>min()</code> or <code>max()</code> functions.<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> coin <span class="token operator">:</span> coins<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">+</span><span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">-</span>coin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>Base case: stop traversing when the <code>n</code>, total amount of money, is 0 or negative.<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Now that we have the state transition equation, let’s optimize it using DP tables.<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> memo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coins<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// dp table</span>memo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> coins<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// helper</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coins<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// base case</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// use dp table</span><span class="token keyword">int</span> res <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> coin <span class="token operator">:</span> coins<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> subproblem <span class="token operator">=</span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">-</span>coin<span class="token punctuation">,</span> coins<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>subproblem <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">+</span>subproblem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// put it in DP table before returning</span>memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> res<span class="token punctuation">;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>In many cases, a bottom to top approach does not require recursion and saves space. We can compute from base case to coinChange(n) because coinChange only uses results from coinChange at a lower level. So, it only uses results that we know have already been computed.  </p><h3 id="Backtracking"><a href="#Backtracking" class="headerlink" title="Backtracking"></a>Backtracking</h3><p>Backtracking is essentially <strong>traversing a decision tree</strong>. The key is to use recursion to make a movement and then delete it. The result is stored as a global variable and is updated meanwhile. This is the framework:</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> choices<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>ending condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// try every choice</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> choice <span class="token operator">:</span> choices<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// make choice</span>    path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>choice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// try</span>    <span class="token function">backtrack</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> choices<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// delete choice</span>    path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>choice<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Binary-search"><a href="#Binary-search" class="headerlink" title="Binary search"></a>Binary search</h3><h2 id="My-plan"><a href="#My-plan" class="headerlink" title="My plan"></a>My plan</h2><p><strong>Goal</strong>: Flag [365 leetcoding]</p><p><strong>Plan</strong>: Solve leetcode problems in this order:</p><pre><code>Recursion -&gt; Linked list -&gt; Stack -&gt; Queue -&gt; Two pointers -&gt; Sliding-window -&gt; hashing -&gt; sorting -&gt; binary search -&gt; trees -&gt; BST -&gt; Heaps -&gt; Graph basics -&gt; BFS -&gt; DFS -&gt; backtracking -&gt; greedy -&gt; Dynamic programming -&gt; advanced graph -&gt; Union find -&gt; bit manipulation</code></pre><p><strong>Action</strong>: Update the framework summary of this post as I learn.  </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> framework </tag>
            
            <tag> algorithms </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
