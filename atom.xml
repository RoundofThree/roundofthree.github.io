<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>myCodingJournal</title>
  
  <subtitle>Stepping into the IT warfield</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://roundofthree.github.io/"/>
  <updated>2020-05-17T22:27:25.000Z</updated>
  <id>https://roundofthree.github.io/</id>
  
  <author>
    <name>RoundofThree</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Easy msfvenom</title>
    <link href="https://roundofthree.github.io/2020/05/18/easy-msfvenom/"/>
    <id>https://roundofthree.github.io/2020/05/18/easy-msfvenom/</id>
    <published>2020-05-17T22:27:25.000Z</published>
    <updated>2020-05-17T22:27:25.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;List-payloads&quot;&gt;&lt;a href=&quot;#List-payloads&quot; class=&quot;headerlink&quot; title=&quot;List payloads&quot;&gt;&lt;/a&gt;List payloads&lt;/h2&gt;&lt;p&gt;Get a list of payloads
        
      
    
    </summary>
    
    
      <category term="Hacking" scheme="https://roundofthree.github.io/categories/Hacking/"/>
    
    
      <category term="metasploit" scheme="https://roundofthree.github.io/tags/metasploit/"/>
    
  </entry>
  
  <entry>
    <title>C buffer overflow to inject shellcode</title>
    <link href="https://roundofthree.github.io/2020/05/14/c-buffer-overflow-to-inject-shellcode/"/>
    <id>https://roundofthree.github.io/2020/05/14/c-buffer-overflow-to-inject-shellcode/</id>
    <published>2020-05-13T23:38:39.000Z</published>
    <updated>2020-05-13T23:38:39.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;See the previous article about buffer
        
      
    
    </summary>
    
    
      <category term="Hacking" scheme="https://roundofthree.github.io/categories/Hacking/"/>
    
    
      <category term="binary exploitation" scheme="https://roundofthree.github.io/tags/binary-exploitation/"/>
    
      <category term="C" scheme="https://roundofthree.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C buffer overflow to hijack RP</title>
    <link href="https://roundofthree.github.io/2020/05/14/c-buffer-overflow-to-hijack-rp/"/>
    <id>https://roundofthree.github.io/2020/05/14/c-buffer-overflow-to-hijack-rp/</id>
    <published>2020-05-13T23:38:25.000Z</published>
    <updated>2020-05-13T23:38:25.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;The return pointer (RP) is located at the
        
      
    
    </summary>
    
    
      <category term="Hacking" scheme="https://roundofthree.github.io/categories/Hacking/"/>
    
    
      <category term="binary exploitation" scheme="https://roundofthree.github.io/tags/binary-exploitation/"/>
    
      <category term="C" scheme="https://roundofthree.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Python threads 1</title>
    <link href="https://roundofthree.github.io/2020/05/14/python-threads-1/"/>
    <id>https://roundofthree.github.io/2020/05/14/python-threads-1/</id>
    <published>2020-05-13T23:33:16.000Z</published>
    <updated>2020-05-13T23:33:16.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;When a server socket accepts a connection, it creates a client socket to handle the communication with the other party. However, if the
        
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://roundofthree.github.io/categories/Programming/"/>
    
    
      <category term="concurrency" scheme="https://roundofthree.github.io/tags/concurrency/"/>
    
      <category term="python" scheme="https://roundofthree.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Quick look into RAM with gdb: Stack &amp; Heap</title>
    <link href="https://roundofthree.github.io/2020/05/14/quick-look-into-ram-with-gdb-stack-heap/"/>
    <id>https://roundofthree.github.io/2020/05/14/quick-look-into-ram-with-gdb-stack-heap/</id>
    <published>2020-05-13T23:29:53.000Z</published>
    <updated>2020-05-13T23:29:53.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;The RAM (random access memory) stores volatile data that is being used by current processes. It is divided into two sections:
        
      
    
    </summary>
    
    
      <category term="Hacking" scheme="https://roundofthree.github.io/categories/Hacking/"/>
    
    
      <category term="memory" scheme="https://roundofthree.github.io/tags/memory/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 141: Linked List Cycle using slow-fast pointers</title>
    <link href="https://roundofthree.github.io/2020/05/14/leetcode-141-linked-list-cycle-using-slow-fast-pointers/"/>
    <id>https://roundofthree.github.io/2020/05/14/leetcode-141-linked-list-cycle-using-slow-fast-pointers/</id>
    <published>2020-05-13T22:40:03.000Z</published>
    <updated>2020-05-13T22:40:03.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Leetcode-141-Linked-List-Cycle-Easy&quot;&gt;&lt;a href=&quot;#Leetcode-141-Linked-List-Cycle-Easy&quot; class=&quot;headerlink&quot; title=&quot;Leetcode 141: Linked
        
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://roundofthree.github.io/categories/Leetcode/"/>
    
    
      <category term="slow-fast pointers" scheme="https://roundofthree.github.io/tags/slow-fast-pointers/"/>
    
      <category term="Linked List" scheme="https://roundofthree.github.io/tags/Linked-List/"/>
    
      <category term="algorithms" scheme="https://roundofthree.github.io/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>TCP and UDP: Transport Layer Protocols</title>
    <link href="https://roundofthree.github.io/2020/05/12/tcp-and-udp/"/>
    <id>https://roundofthree.github.io/2020/05/12/tcp-and-udp/</id>
    <published>2020-05-11T22:54:56.000Z</published>
    <updated>2020-05-11T22:54:56.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;TCP and UDP are &lt;strong&gt;transport layer&lt;/strong&gt; protocols (OSI layer 4). They are responsible for sending data from a source computer
        
      
    
    </summary>
    
    
      <category term="Hacking" scheme="https://roundofthree.github.io/categories/Hacking/"/>
    
    
      <category term="networking" scheme="https://roundofthree.github.io/tags/networking/"/>
    
  </entry>
  
  <entry>
    <title>How to practice data structures &amp; algorithms, my way to leetcoding</title>
    <link href="https://roundofthree.github.io/2020/05/03/leetcode-frameworks/"/>
    <id>https://roundofthree.github.io/2020/05/03/leetcode-frameworks/</id>
    <published>2020-05-03T21:00:00.000Z</published>
    <updated>2020-05-03T21:00:00.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Heya! This is the first of a series of articles about programming problems, which corresponds to my flag &lt;strong&gt;[365
        
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://roundofthree.github.io/categories/Leetcode/"/>
    
    
      <category term="algorithms" scheme="https://roundofthree.github.io/tags/algorithms/"/>
    
      <category term="framework" scheme="https://roundofthree.github.io/tags/framework/"/>
    
  </entry>
  
</feed>
